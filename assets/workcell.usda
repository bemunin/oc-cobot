#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (50008.48245439056, -1.2811322423346552, 1.8009168123900876)
                double radius = 6.49921875
            }
            dictionary Perspective = {
                double3 position = (-1.881071812850229, -3.118192413538516, 4.676582731282311)
                double3 target = (-1.9504904326569368, 0.7973492177697876, 0.9328137924574751)
            }
            dictionary Right = {
                double3 position = (-1.3390253924285254, -49999.524, 1.6635517444395298)
                double radius = 18.420742797851563
            }
            dictionary Top = {
                double3 position = (-1.3637662490967428, 0.4629651785479787, 50000.6)
                double radius = 13.629945373535156
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary metricsAssembler = {
            dictionary "/Main/_g_box" = {
            }
            dictionary "/World/table" = {
            }
            int version = 1
        }
        dictionary navmeshSettings = {
            double agentHeight = 180
            double agentRadius = 20
            bool excludeRigidBodies = 1
            int ver = 1
            double voxelCeiling = 460
        }
        dictionary omni_layer = {
            string authoring_layer = "./workcell.usda"
            dictionary locked = {
                bool "./Enviroments/dev_env.usda" = 1
                bool "./Environments/default.usda" = 1
                bool "./Environments/dev_env.usda" = 1
            }
            dictionary muteness = {
            }
        }
        dictionary renderSettings = {
            float3 "rtx:debugView:pixelDebug:textColor" = (0, 1e18, 0)
            float3 "rtx:fog:fogColor" = (0.75, 0.75, 0.75)
            float3 "rtx:index:backgroundColor" = (0, 0, 0)
            float3 "rtx:index:regionOfInterestMax" = (0, 0, 0)
            float3 "rtx:index:regionOfInterestMin" = (0, 0, 0)
            float3 "rtx:post:backgroundZeroAlpha:backgroundDefaultColor" = (0, 0, 0)
            float3 "rtx:post:colorcorr:contrast" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gain" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gamma" = (1, 1, 1)
            float3 "rtx:post:colorcorr:offset" = (0, 0, 0)
            float3 "rtx:post:colorcorr:saturation" = (1, 1, 1)
            float3 "rtx:post:colorgrad:blackpoint" = (0, 0, 0)
            float3 "rtx:post:colorgrad:contrast" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gain" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gamma" = (1, 1, 1)
            float3 "rtx:post:colorgrad:lift" = (0, 0, 0)
            float3 "rtx:post:colorgrad:multiply" = (1, 1, 1)
            float3 "rtx:post:colorgrad:offset" = (0, 0, 0)
            float3 "rtx:post:colorgrad:whitepoint" = (1, 1, 1)
            float3 "rtx:post:lensDistortion:lensFocalLengthArray" = (10, 30, 50)
            float3 "rtx:post:lensFlares:anisoFlareFalloffX" = (450, 475, 500)
            float3 "rtx:post:lensFlares:anisoFlareFalloffY" = (10, 10, 10)
            float3 "rtx:post:lensFlares:cutoffPoint" = (2, 2, 2)
            float3 "rtx:post:lensFlares:haloFlareFalloff" = (10, 10, 10)
            float3 "rtx:post:lensFlares:haloFlareRadius" = (75, 75, 75)
            float3 "rtx:post:lensFlares:isotropicFlareFalloff" = (50, 50, 50)
            float3 "rtx:post:tonemap:whitepoint" = (1, 1, 1)
            float3 "rtx:raytracing:indexdirect:svoBrickSize" = (32, 32, 32)
            float3 "rtx:raytracing:inscattering:singleScatteringAlbedo" = (0.9, 0.9, 0.9)
            float3 "rtx:raytracing:inscattering:transmittanceColor" = (0.5, 0.5, 0.5)
            float3 "rtx:sceneDb:ambientLightColor" = (0.1, 0.1, 0.1)
        }
    }
    defaultPrim = "Main"
    endTimeCode = 100
    metersPerUnit = 1
    startTimeCode = 0
    subLayers = [
        @./environments/default.usda@
    ]
    timeCodesPerSecond = 60
    upAxis = "Z"
)

def Xform "Main"
{
    def Xform "Cameras"
    {
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Camera "Workcell_Top"
        {
            float2 clippingRange = (0.01, 10000000)
            float focalLength = 18.147562
            float focusDistance = 400
            bool omni:kit:cameraLock = 1
            custom uniform vector3d omni:kit:centerOfInterest = (0, 0, -400)
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-1.4000000208616257, 0, 7)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Camera "Workcell_Side"
        {
            float2 clippingRange = (0.01, 10000000)
            float focalLength = 18.147562
            float focusDistance = 400
            bool omni:kit:cameraLock = 1
            custom uniform vector3d omni:kit:centerOfInterest = (0, 0, -400)
            quatd xformOp:orient = (0.7071067811865476, 0.7071067811865475, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-1.5, -6, 0.5)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Camera "Workcell_Perspective"
        {
            float2 clippingRange = (0.01, 10000000)
            float focalLength = 18.147562
            float focusDistance = 400
            custom uniform vector3d omni:kit:centerOfInterest = (0, 0, -11.5639272151109)
            quatd xformOp:orient = (0.8648915164597791, 0.5018444183727242, 0.005378351055829955, 0.009269187880606685)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0.06904686378895371, -4.23903402680438, 3.0698485728196356)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }
    }

    def RectLight "RectLight_Conveyor_End" (
        active = false
        prepend apiSchemas = ["ShapingAPI"]
    )
    {
        float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
        float inputs:height = 1
        float inputs:intensity = 5000
        float inputs:shaping:cone:angle = 180
        float inputs:shaping:cone:softness
        float inputs:shaping:focus
        color3f inputs:shaping:focusTint
        asset inputs:shaping:ies:file
        float inputs:width = 1
        quatd xformOp:orient = (0.6589721757548671, 0.24203281773588833, -0.25215888766748085, -0.666026787817143)
        double3 xformOp:scale = (2.5955598393074855, 1, 0.9999999999999998)
        double3 xformOp:translate = (-3.960166955511721, -0.40447433903614144, 2.420274118666174)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def Xform "PickingUnit" (
        kind = "group"
    )
    {
        float3 xformOp:rotateXYZ = (0, 0, 90)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-1.1202227822839412, 1.3353054408866818, 0)
        float3 xformOp:translate:pivot = (0.02677745, -0.00008325577, 0.95733154)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:translate:pivot", "xformOp:rotateXYZ", "xformOp:scale", "!invert!xformOp:translate:pivot"]

        def Xform "Baskets" (
            kind = "group"
        )
        {
            float3 xformOp:rotateXYZ = (0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0.25, 0, 1)
            float3 xformOp:translate:pivot = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:translate:pivot", "xformOp:rotateXYZ", "xformOp:scale", "!invert!xformOp:translate:pivot"]

            def "basket1" (
                prepend payload = @http://omniverse-content-production.s3-us-west-2.amazonaws.com/Assets/Isaac/4.1/Isaac/Props/KLT_Bin/small_KLT_visual_collision.usd@
            )
            {
                float3 xformOp:rotateXYZ = (0, 0, -90)
                float3 xformOp:scale = (2.1, 2, 2.5)
                double3 xformOp:translate = (0, -0.46, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "Visuals"
                {
                    over "FOF_Mesh_Label_1"
                    {
                        token visibility = "inherited"
                    }

                    over "FOF_Mesh_Label_6_Small"
                    {
                        token visibility = "invisible"
                    }

                    over "Looks"
                    {
                        over "FOF_Mesh_Magenta_BoxSG"
                        {
                            over "Shader"
                            {
                                color3f inputs:diffuse_color_constant = (0.78902954, 0.7890216, 0.7890216) (
                                    displayName = "Albedo Color"
                                    doc = "This is the albedo base color"
                                    hidden = false
                                    renderType = "color"
                                )
                                asset inputs:diffuse_texture = @@ (
                                    hidden = false
                                    renderType = "texture_2d"
                                )
                            }
                        }
                    }

                    over "FOF_Mesh_Magenta_Box" (
                        prepend apiSchemas = ["PhysxTriangleMeshSimplificationCollisionAPI"]
                    )
                    {
                        uniform token physics:approximation = "meshSimplification"
                        float3 xformOp:rotateXYZ = (90.00001, -0, 0)
                        float3 xformOp:scale = (0.00999999, 0.00999999, 0.00999999)
                        double3 xformOp:translate = (0, 1.9073485901799365e-8, -0.06820124473718003)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                    }
                }
            }

            def "basket2" (
                prepend payload = @http://omniverse-content-production.s3-us-west-2.amazonaws.com/Assets/Isaac/4.1/Isaac/Props/KLT_Bin/small_KLT_visual_collision.usd@
            )
            {
                float3 xformOp:rotateXYZ = (0, 0, -90)
                float3 xformOp:scale = (2.1, 2, 2.5)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "Visuals"
                {
                    over "Looks"
                    {
                        over "FOF_Mesh_LabelsSG"
                        {
                            custom uniform bool paused = 0 (
                                customData = {
                                    bool nonpersistant = 1
                                }
                                hidden = true
                            )

                            over "Shader"
                            {
                                reorder properties = ["inputs:diffuse_color_constant", "inputs:diffuse_texture", "inputs:albedo_desaturation", "inputs:albedo_add", "inputs:albedo_brightness", "inputs:diffuse_tint", "inputs:reflection_roughness_constant", "inputs:reflection_roughness_texture_influence", "inputs:reflectionroughness_texture", "inputs:metallic_constant", "inputs:metallic_texture_influence", "inputs:metallic_texture", "inputs:specular_level", "inputs:enable_ORM_texture", "inputs:ORM_texture", "inputs:ao_to_diffuse", "inputs:ao_texture", "inputs:enable_emission", "inputs:emissive_color", "inputs:emissive_color_texture", "inputs:emissive_mask_texture", "inputs:emissive_intensity", "inputs:enable_opacity", "inputs:opacity_texture", "inputs:opacity_constant", "inputs:enable_opacity_texture", "inputs:opacity_mode", "inputs:opacity_threshold", "inputs:geometry_normal_roughness_strength", "inputs:bump_factor", "inputs:normalmap_texture", "inputs:detail_bump_factor", "inputs:detail_normalmap_texture", "inputs:flip_tangent_u", "inputs:flip_tangent_v", "inputs:project_uvw", "inputs:world_or_object", "inputs:uv_space_index", "inputs:texture_translate", "inputs:texture_rotate", "inputs:texture_scale", "inputs:detail_texture_translate", "inputs:detail_texture_rotate", "inputs:detail_texture_scale"]
                                float inputs:albedo_add = 0 (
                                    customData = {
                                        float default = 0
                                        dictionary soft_range = {
                                            float max = 1
                                            float min = -1
                                        }
                                    }
                                    displayGroup = "Albedo"
                                    displayName = "Albedo Add"
                                    doc = "Adds a constant value to the diffuse color "
                                    hidden = false
                                )
                                float inputs:albedo_brightness = 1 (
                                    customData = {
                                        float default = 1
                                        dictionary soft_range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "Albedo"
                                    displayName = "Albedo Brightness"
                                    doc = "Multiplier for the diffuse color "
                                    hidden = false
                                )
                                float inputs:albedo_desaturation = 0 (
                                    customData = {
                                        float default = 0
                                        dictionary soft_range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "Albedo"
                                    displayName = "Albedo Desaturation"
                                    doc = "Desaturates the diffuse color"
                                    hidden = false
                                )
                                asset inputs:ao_texture = @@ (
                                    colorSpace = "raw"
                                    customData = {
                                        asset default = @@
                                    }
                                    displayGroup = "AO"
                                    displayName = "Ambient Occlusion Map"
                                    doc = "The ambient occlusion texture for the material"
                                    hidden = false
                                    renderType = "texture_2d"
                                )
                                float inputs:ao_to_diffuse = 0 (
                                    customData = {
                                        float default = 0
                                        dictionary range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "AO"
                                    displayName = "AO to diffuse"
                                    doc = "Controls the amount of ambient occlusion multiplied against the diffuse color channel"
                                    hidden = false
                                )
                                float inputs:bump_factor = 1 (
                                    customData = {
                                        float default = 1
                                        dictionary soft_range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "Normal"
                                    displayName = "Normal Strength"
                                    doc = "Strength of normal map"
                                    hidden = false
                                )
                                float inputs:detail_bump_factor = 0.3 (
                                    customData = {
                                        float default = 0.3
                                        dictionary soft_range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "Normal"
                                    displayName = "Detail Normal Strength"
                                    doc = "Strength of the detail normal"
                                    hidden = false
                                )
                                asset inputs:detail_normalmap_texture = @@ (
                                    colorSpace = "raw"
                                    customData = {
                                        asset default = @@
                                    }
                                    displayGroup = "Normal"
                                    displayName = "Detail Normal Map"
                                    hidden = false
                                    renderType = "texture_2d"
                                )
                                float inputs:detail_texture_rotate = 0 (
                                    customData = {
                                        float default = 0
                                    }
                                    displayGroup = "UV"
                                    displayName = "Detail Texture Rotate"
                                    doc = "Rotates angle of the detail texture in degrees."
                                    hidden = false
                                )
                                float2 inputs:detail_texture_scale = (1, 1) (
                                    customData = {
                                        float2 default = (1, 1)
                                    }
                                    displayGroup = "UV"
                                    displayName = "Detail Texture Tiling"
                                    doc = "Controls the repetition of the detail texture."
                                    hidden = false
                                )
                                float2 inputs:detail_texture_translate = (0, 0) (
                                    customData = {
                                        float2 default = (0, 0)
                                    }
                                    displayGroup = "UV"
                                    displayName = "Detail Texture Translate"
                                    doc = "Controls the position of the detail texture."
                                    hidden = false
                                )
                                color3f inputs:diffuse_color_constant (
                                    displayName = "Albedo Color"
                                    doc = "This is the albedo base color"
                                    hidden = false
                                    renderType = "color"
                                )
                                asset inputs:diffuse_texture (
                                    colorSpace = "auto"
                                    hidden = false
                                    renderType = "texture_2d"
                                )
                                color3f inputs:diffuse_tint = (1, 1, 1) (
                                    customData = {
                                        float3 default = (1, 1, 1)
                                    }
                                    displayGroup = "Albedo"
                                    displayName = "Color Tint"
                                    doc = "When enabled, this color value is multiplied over the final albedo color"
                                    hidden = false
                                    renderType = "color"
                                )
                                color3f inputs:emissive_color = (1, 0.1, 0.1) (
                                    customData = {
                                        float3 default = (1, 0.1, 0.1)
                                    }
                                    displayGroup = "Emissive"
                                    displayName = "Emissive Color"
                                    doc = "The emission color"
                                    hidden = false
                                    renderType = "color"
                                )
                                asset inputs:emissive_color_texture = @@ (
                                    colorSpace = "auto"
                                    customData = {
                                        asset default = @@
                                    }
                                    displayGroup = "Emissive"
                                    displayName = "Emissive Color map"
                                    doc = "The emissive color texture"
                                    hidden = false
                                    renderType = "texture_2d"
                                )
                                float inputs:emissive_intensity = 40 (
                                    customData = {
                                        float default = 40
                                    }
                                    displayGroup = "Emissive"
                                    displayName = "Emissive Intensity"
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                                asset inputs:emissive_mask_texture = @@ (
                                    colorSpace = "raw"
                                    customData = {
                                        asset default = @@
                                    }
                                    displayGroup = "Emissive"
                                    displayName = "Emissive Mask map"
                                    doc = "The texture masking the emissive color"
                                    hidden = false
                                    renderType = "texture_2d"
                                )
                                bool inputs:enable_emission = 0 (
                                    customData = {
                                        bool default = 0
                                    }
                                    displayGroup = "Emissive"
                                    displayName = "Enable Emission"
                                    doc = "Enables the emission of light from the material"
                                    hidden = false
                                )
                                bool inputs:enable_opacity = 0 (
                                    customData = {
                                        bool default = 0
                                    }
                                    displayGroup = "Opacity"
                                    displayName = "Enable Opacity"
                                    doc = "Enables the use of cutout opacity"
                                    hidden = false
                                )
                                bool inputs:enable_opacity_texture = 0 (
                                    customData = {
                                        bool default = 0
                                    }
                                    displayGroup = "Opacity"
                                    displayName = "Enable Opacity Texture"
                                    doc = "Enables or disables the usage of the opacity texture map"
                                    hidden = false
                                )
                                bool inputs:enable_ORM_texture = 0 (
                                    customData = {
                                        bool default = 0
                                    }
                                    displayGroup = "Reflectivity"
                                    displayName = "Enable ORM Texture"
                                    doc = "The ORM texture will be used to extract the Occlusion, Roughness and Metallic textures from R,G,B channels"
                                    hidden = false
                                )
                                bool inputs:flip_tangent_u = 0 (
                                    customData = {
                                        bool default = 0
                                    }
                                    displayGroup = "Normal"
                                    displayName = "Normal Map Flip U Tangent"
                                    hidden = false
                                )
                                bool inputs:flip_tangent_v = 1 (
                                    customData = {
                                        bool default = 1
                                    }
                                    displayGroup = "Normal"
                                    displayName = "Normal Map Flip V Tangent"
                                    hidden = false
                                )
                                float inputs:geometry_normal_roughness_strength = 1 (
                                    customData = {
                                        float default = 1
                                        dictionary range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "Normal"
                                    displayName = "Normal map to roughness weight"
                                    doc = "Enables and weights roughness induced by normal maps"
                                    hidden = false
                                )
                                float inputs:metallic_constant = 0 (
                                    customData = {
                                        float default = 0
                                        dictionary range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "Reflectivity"
                                    displayName = "Metallic Amount"
                                    doc = "Metallic Material"
                                    hidden = false
                                )
                                asset inputs:metallic_texture = @@ (
                                    colorSpace = "raw"
                                    customData = {
                                        asset default = @@
                                    }
                                    displayGroup = "Reflectivity"
                                    displayName = "Metallic Map"
                                    hidden = false
                                    renderType = "texture_2d"
                                )
                                float inputs:metallic_texture_influence = 0 (
                                    customData = {
                                        float default = 0
                                        dictionary range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "Reflectivity"
                                    displayName = "Metallic Map Influence"
                                    doc = "Blends between the constant value and the lookup of the metallic texture"
                                    hidden = false
                                )
                                asset inputs:normalmap_texture = @@ (
                                    colorSpace = "raw"
                                    customData = {
                                        asset default = @@
                                    }
                                    displayGroup = "Normal"
                                    displayName = "Normal Map"
                                    hidden = false
                                    renderType = "texture_2d"
                                )
                                float inputs:opacity_constant = 1 (
                                    customData = {
                                        float default = 1
                                        dictionary range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "Opacity"
                                    displayName = "Opacity Amount"
                                    doc = "Opacity value between 0 and 1, when Opacity Map is not valid"
                                    hidden = false
                                )
                                int inputs:opacity_mode = 1 (
                                    customData = {
                                        int default = 1
                                    }
                                    displayGroup = "Opacity"
                                    displayName = "Opacity Mono Source"
                                    doc = "Determines how to lookup opacity from the supplied texture. mono_alpha, mono_average, mono_luminance, mono_maximum"
                                    hidden = false
                                    renderType = "mono_mode"
                                    sdrMetadata = {
                                        string __SDR__enum_value = "mono_average"
                                        string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                                    }
                                )
                                asset inputs:opacity_texture = @@ (
                                    colorSpace = "raw"
                                    customData = {
                                        asset default = @@
                                    }
                                    displayGroup = "Opacity"
                                    displayName = "Opacity Map"
                                    hidden = false
                                    renderType = "texture_2d"
                                )
                                float inputs:opacity_threshold = 0 (
                                    customData = {
                                        float default = 0
                                        dictionary range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "Opacity"
                                    displayName = "Opacity Threshold"
                                    doc = "If 0, use fractional opacity values 'as is'; if > 0, remap opacity values to 1 when >= threshold and to 0 otherwise"
                                    hidden = false
                                )
                                asset inputs:ORM_texture = @@ (
                                    colorSpace = "raw"
                                    customData = {
                                        asset default = @@
                                    }
                                    displayGroup = "Reflectivity"
                                    displayName = "ORM Map"
                                    doc = "Texture that has Occlusion, Roughness and Metallic maps stored in their respective R, G and B channels"
                                    hidden = false
                                    renderType = "texture_2d"
                                )
                                bool inputs:project_uvw = 0 (
                                    customData = {
                                        bool default = 0
                                    }
                                    displayGroup = "UV"
                                    displayName = "Enable Project UVW Coordinates"
                                    doc = "When enabled, UV coordinates will be generated by projecting them from a coordinate system"
                                    hidden = false
                                )
                                float inputs:reflection_roughness_constant = 0.5 (
                                    customData = {
                                        float default = 0.5
                                        dictionary range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "Reflectivity"
                                    displayName = "Roughness Amount"
                                    doc = "Higher roughness values lead to more blurry reflections"
                                    hidden = false
                                )
                                float inputs:reflection_roughness_texture_influence = 0 (
                                    customData = {
                                        float default = 0
                                        dictionary range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "Reflectivity"
                                    displayName = "Roughness Map Influence"
                                    doc = "Blends between the constant value and the lookup of the roughness texture"
                                    hidden = false
                                )
                                asset inputs:reflectionroughness_texture = @@ (
                                    colorSpace = "raw"
                                    customData = {
                                        asset default = @@
                                    }
                                    displayGroup = "Reflectivity"
                                    displayName = "Roughness Map"
                                    hidden = false
                                    renderType = "texture_2d"
                                )
                                float inputs:specular_level = 0.5 (
                                    customData = {
                                        float default = 0.5
                                        dictionary soft_range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "Reflectivity"
                                    displayName = "Specular"
                                    doc = "The specular level (intensity) of the material"
                                    hidden = false
                                )
                                float inputs:texture_rotate = 0 (
                                    customData = {
                                        float default = 0
                                    }
                                    displayGroup = "UV"
                                    displayName = "Texture Rotate"
                                    doc = "Rotates angle of texture in degrees."
                                    hidden = false
                                )
                                float2 inputs:texture_scale = (1, 1) (
                                    customData = {
                                        float2 default = (1, 1)
                                    }
                                    displayGroup = "UV"
                                    displayName = "Texture Tiling"
                                    doc = "Controls the repetition of the texture."
                                    hidden = false
                                )
                                float2 inputs:texture_translate = (0, 0) (
                                    customData = {
                                        float2 default = (0, 0)
                                    }
                                    displayGroup = "UV"
                                    displayName = "Texture Translate"
                                    doc = "Controls position of texture."
                                    hidden = false
                                )
                                int inputs:uv_space_index = 0 (
                                    customData = {
                                        int default = 0
                                        dictionary range = {
                                            int max = 3
                                            int min = 0
                                        }
                                    }
                                    displayGroup = "UV"
                                    displayName = "UV Space Index"
                                    doc = "UV Space Index."
                                    hidden = false
                                )
                                bool inputs:world_or_object = 0 (
                                    customData = {
                                        bool default = 0
                                    }
                                    displayGroup = "UV"
                                    displayName = "Enable World Space"
                                    doc = "When enabled, uses world space for projection, otherwise object space is used"
                                    hidden = false
                                )
                                token outputs:out (
                                    renderType = "material"
                                )
                            }
                        }

                        over "FOF_Mesh_StickerSG"
                        {
                            custom uniform bool paused = 0 (
                                customData = {
                                    bool nonpersistant = 1
                                }
                                hidden = true
                            )

                            over "Shader"
                            {
                                reorder properties = ["inputs:diffuse_color_constant", "inputs:diffuse_texture", "inputs:albedo_desaturation", "inputs:albedo_add", "inputs:albedo_brightness", "inputs:diffuse_tint", "inputs:reflection_roughness_constant", "inputs:reflection_roughness_texture_influence", "inputs:reflectionroughness_texture", "inputs:metallic_constant", "inputs:metallic_texture_influence", "inputs:metallic_texture", "inputs:specular_level", "inputs:enable_ORM_texture", "inputs:ORM_texture", "inputs:ao_to_diffuse", "inputs:ao_texture", "inputs:enable_emission", "inputs:emissive_color", "inputs:emissive_color_texture", "inputs:emissive_mask_texture", "inputs:emissive_intensity", "inputs:enable_opacity", "inputs:opacity_texture", "inputs:opacity_constant", "inputs:enable_opacity_texture", "inputs:opacity_mode", "inputs:opacity_threshold", "inputs:geometry_normal_roughness_strength", "inputs:bump_factor", "inputs:normalmap_texture", "inputs:detail_bump_factor", "inputs:detail_normalmap_texture", "inputs:flip_tangent_u", "inputs:flip_tangent_v", "inputs:project_uvw", "inputs:world_or_object", "inputs:uv_space_index", "inputs:texture_translate", "inputs:texture_rotate", "inputs:texture_scale", "inputs:detail_texture_translate", "inputs:detail_texture_rotate", "inputs:detail_texture_scale"]
                                float inputs:albedo_add = 0 (
                                    customData = {
                                        float default = 0
                                        dictionary soft_range = {
                                            float max = 1
                                            float min = -1
                                        }
                                    }
                                    displayGroup = "Albedo"
                                    displayName = "Albedo Add"
                                    doc = "Adds a constant value to the diffuse color "
                                    hidden = false
                                )
                                float inputs:albedo_brightness = 1 (
                                    customData = {
                                        float default = 1
                                        dictionary soft_range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "Albedo"
                                    displayName = "Albedo Brightness"
                                    doc = "Multiplier for the diffuse color "
                                    hidden = false
                                )
                                float inputs:albedo_desaturation = 0 (
                                    customData = {
                                        float default = 0
                                        dictionary soft_range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "Albedo"
                                    displayName = "Albedo Desaturation"
                                    doc = "Desaturates the diffuse color"
                                    hidden = false
                                )
                                asset inputs:ao_texture = @@ (
                                    colorSpace = "raw"
                                    customData = {
                                        asset default = @@
                                    }
                                    displayGroup = "AO"
                                    displayName = "Ambient Occlusion Map"
                                    doc = "The ambient occlusion texture for the material"
                                    hidden = false
                                    renderType = "texture_2d"
                                )
                                float inputs:ao_to_diffuse = 0 (
                                    customData = {
                                        float default = 0
                                        dictionary range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "AO"
                                    displayName = "AO to diffuse"
                                    doc = "Controls the amount of ambient occlusion multiplied against the diffuse color channel"
                                    hidden = false
                                )
                                float inputs:bump_factor = 1 (
                                    customData = {
                                        float default = 1
                                        dictionary soft_range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "Normal"
                                    displayName = "Normal Strength"
                                    doc = "Strength of normal map"
                                    hidden = false
                                )
                                float inputs:detail_bump_factor = 0.3 (
                                    customData = {
                                        float default = 0.3
                                        dictionary soft_range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "Normal"
                                    displayName = "Detail Normal Strength"
                                    doc = "Strength of the detail normal"
                                    hidden = false
                                )
                                asset inputs:detail_normalmap_texture = @@ (
                                    colorSpace = "raw"
                                    customData = {
                                        asset default = @@
                                    }
                                    displayGroup = "Normal"
                                    displayName = "Detail Normal Map"
                                    hidden = false
                                    renderType = "texture_2d"
                                )
                                float inputs:detail_texture_rotate = 0 (
                                    customData = {
                                        float default = 0
                                    }
                                    displayGroup = "UV"
                                    displayName = "Detail Texture Rotate"
                                    doc = "Rotates angle of the detail texture in degrees."
                                    hidden = false
                                )
                                float2 inputs:detail_texture_scale = (1, 1) (
                                    customData = {
                                        float2 default = (1, 1)
                                    }
                                    displayGroup = "UV"
                                    displayName = "Detail Texture Tiling"
                                    doc = "Controls the repetition of the detail texture."
                                    hidden = false
                                )
                                float2 inputs:detail_texture_translate = (0, 0) (
                                    customData = {
                                        float2 default = (0, 0)
                                    }
                                    displayGroup = "UV"
                                    displayName = "Detail Texture Translate"
                                    doc = "Controls the position of the detail texture."
                                    hidden = false
                                )
                                color3f inputs:diffuse_color_constant (
                                    displayName = "Albedo Color"
                                    doc = "This is the albedo base color"
                                    hidden = false
                                    renderType = "color"
                                )
                                asset inputs:diffuse_texture (
                                    colorSpace = "auto"
                                    hidden = false
                                    renderType = "texture_2d"
                                )
                                color3f inputs:diffuse_tint = (1, 1, 1) (
                                    customData = {
                                        float3 default = (1, 1, 1)
                                    }
                                    displayGroup = "Albedo"
                                    displayName = "Color Tint"
                                    doc = "When enabled, this color value is multiplied over the final albedo color"
                                    hidden = false
                                    renderType = "color"
                                )
                                color3f inputs:emissive_color = (1, 0.1, 0.1) (
                                    customData = {
                                        float3 default = (1, 0.1, 0.1)
                                    }
                                    displayGroup = "Emissive"
                                    displayName = "Emissive Color"
                                    doc = "The emission color"
                                    hidden = false
                                    renderType = "color"
                                )
                                asset inputs:emissive_color_texture = @@ (
                                    colorSpace = "auto"
                                    customData = {
                                        asset default = @@
                                    }
                                    displayGroup = "Emissive"
                                    displayName = "Emissive Color map"
                                    doc = "The emissive color texture"
                                    hidden = false
                                    renderType = "texture_2d"
                                )
                                float inputs:emissive_intensity = 40 (
                                    customData = {
                                        float default = 40
                                    }
                                    displayGroup = "Emissive"
                                    displayName = "Emissive Intensity"
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                                asset inputs:emissive_mask_texture = @@ (
                                    colorSpace = "raw"
                                    customData = {
                                        asset default = @@
                                    }
                                    displayGroup = "Emissive"
                                    displayName = "Emissive Mask map"
                                    doc = "The texture masking the emissive color"
                                    hidden = false
                                    renderType = "texture_2d"
                                )
                                bool inputs:enable_emission = 0 (
                                    customData = {
                                        bool default = 0
                                    }
                                    displayGroup = "Emissive"
                                    displayName = "Enable Emission"
                                    doc = "Enables the emission of light from the material"
                                    hidden = false
                                )
                                bool inputs:enable_opacity = 0 (
                                    customData = {
                                        bool default = 0
                                    }
                                    displayGroup = "Opacity"
                                    displayName = "Enable Opacity"
                                    doc = "Enables the use of cutout opacity"
                                    hidden = false
                                )
                                bool inputs:enable_opacity_texture = 0 (
                                    customData = {
                                        bool default = 0
                                    }
                                    displayGroup = "Opacity"
                                    displayName = "Enable Opacity Texture"
                                    doc = "Enables or disables the usage of the opacity texture map"
                                    hidden = false
                                )
                                bool inputs:enable_ORM_texture = 0 (
                                    customData = {
                                        bool default = 0
                                    }
                                    displayGroup = "Reflectivity"
                                    displayName = "Enable ORM Texture"
                                    doc = "The ORM texture will be used to extract the Occlusion, Roughness and Metallic textures from R,G,B channels"
                                    hidden = false
                                )
                                bool inputs:flip_tangent_u = 0 (
                                    customData = {
                                        bool default = 0
                                    }
                                    displayGroup = "Normal"
                                    displayName = "Normal Map Flip U Tangent"
                                    hidden = false
                                )
                                bool inputs:flip_tangent_v = 1 (
                                    customData = {
                                        bool default = 1
                                    }
                                    displayGroup = "Normal"
                                    displayName = "Normal Map Flip V Tangent"
                                    hidden = false
                                )
                                float inputs:geometry_normal_roughness_strength = 1 (
                                    customData = {
                                        float default = 1
                                        dictionary range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "Normal"
                                    displayName = "Normal map to roughness weight"
                                    doc = "Enables and weights roughness induced by normal maps"
                                    hidden = false
                                )
                                float inputs:metallic_constant = 0 (
                                    customData = {
                                        float default = 0
                                        dictionary range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "Reflectivity"
                                    displayName = "Metallic Amount"
                                    doc = "Metallic Material"
                                    hidden = false
                                )
                                asset inputs:metallic_texture = @@ (
                                    colorSpace = "raw"
                                    customData = {
                                        asset default = @@
                                    }
                                    displayGroup = "Reflectivity"
                                    displayName = "Metallic Map"
                                    hidden = false
                                    renderType = "texture_2d"
                                )
                                float inputs:metallic_texture_influence = 0 (
                                    customData = {
                                        float default = 0
                                        dictionary range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "Reflectivity"
                                    displayName = "Metallic Map Influence"
                                    doc = "Blends between the constant value and the lookup of the metallic texture"
                                    hidden = false
                                )
                                asset inputs:normalmap_texture = @@ (
                                    colorSpace = "raw"
                                    customData = {
                                        asset default = @@
                                    }
                                    displayGroup = "Normal"
                                    displayName = "Normal Map"
                                    hidden = false
                                    renderType = "texture_2d"
                                )
                                float inputs:opacity_constant = 1 (
                                    customData = {
                                        float default = 1
                                        dictionary range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "Opacity"
                                    displayName = "Opacity Amount"
                                    doc = "Opacity value between 0 and 1, when Opacity Map is not valid"
                                    hidden = false
                                )
                                int inputs:opacity_mode = 1 (
                                    customData = {
                                        int default = 1
                                    }
                                    displayGroup = "Opacity"
                                    displayName = "Opacity Mono Source"
                                    doc = "Determines how to lookup opacity from the supplied texture. mono_alpha, mono_average, mono_luminance, mono_maximum"
                                    hidden = false
                                    renderType = "mono_mode"
                                    sdrMetadata = {
                                        string __SDR__enum_value = "mono_average"
                                        string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                                    }
                                )
                                asset inputs:opacity_texture = @@ (
                                    colorSpace = "raw"
                                    customData = {
                                        asset default = @@
                                    }
                                    displayGroup = "Opacity"
                                    displayName = "Opacity Map"
                                    hidden = false
                                    renderType = "texture_2d"
                                )
                                float inputs:opacity_threshold = 0 (
                                    customData = {
                                        float default = 0
                                        dictionary range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "Opacity"
                                    displayName = "Opacity Threshold"
                                    doc = "If 0, use fractional opacity values 'as is'; if > 0, remap opacity values to 1 when >= threshold and to 0 otherwise"
                                    hidden = false
                                )
                                asset inputs:ORM_texture = @@ (
                                    colorSpace = "raw"
                                    customData = {
                                        asset default = @@
                                    }
                                    displayGroup = "Reflectivity"
                                    displayName = "ORM Map"
                                    doc = "Texture that has Occlusion, Roughness and Metallic maps stored in their respective R, G and B channels"
                                    hidden = false
                                    renderType = "texture_2d"
                                )
                                bool inputs:project_uvw = 0 (
                                    customData = {
                                        bool default = 0
                                    }
                                    displayGroup = "UV"
                                    displayName = "Enable Project UVW Coordinates"
                                    doc = "When enabled, UV coordinates will be generated by projecting them from a coordinate system"
                                    hidden = false
                                )
                                float inputs:reflection_roughness_constant = 0.5 (
                                    customData = {
                                        float default = 0.5
                                        dictionary range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "Reflectivity"
                                    displayName = "Roughness Amount"
                                    doc = "Higher roughness values lead to more blurry reflections"
                                    hidden = false
                                )
                                float inputs:reflection_roughness_texture_influence = 0 (
                                    customData = {
                                        float default = 0
                                        dictionary range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "Reflectivity"
                                    displayName = "Roughness Map Influence"
                                    doc = "Blends between the constant value and the lookup of the roughness texture"
                                    hidden = false
                                )
                                asset inputs:reflectionroughness_texture = @@ (
                                    colorSpace = "raw"
                                    customData = {
                                        asset default = @@
                                    }
                                    displayGroup = "Reflectivity"
                                    displayName = "Roughness Map"
                                    hidden = false
                                    renderType = "texture_2d"
                                )
                                float inputs:specular_level = 0.5 (
                                    customData = {
                                        float default = 0.5
                                        dictionary soft_range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "Reflectivity"
                                    displayName = "Specular"
                                    doc = "The specular level (intensity) of the material"
                                    hidden = false
                                )
                                float inputs:texture_rotate = 0 (
                                    customData = {
                                        float default = 0
                                    }
                                    displayGroup = "UV"
                                    displayName = "Texture Rotate"
                                    doc = "Rotates angle of texture in degrees."
                                    hidden = false
                                )
                                float2 inputs:texture_scale = (1, 1) (
                                    customData = {
                                        float2 default = (1, 1)
                                    }
                                    displayGroup = "UV"
                                    displayName = "Texture Tiling"
                                    doc = "Controls the repetition of the texture."
                                    hidden = false
                                )
                                float2 inputs:texture_translate = (0, 0) (
                                    customData = {
                                        float2 default = (0, 0)
                                    }
                                    displayGroup = "UV"
                                    displayName = "Texture Translate"
                                    doc = "Controls position of texture."
                                    hidden = false
                                )
                                int inputs:uv_space_index = 0 (
                                    customData = {
                                        int default = 0
                                        dictionary range = {
                                            int max = 3
                                            int min = 0
                                        }
                                    }
                                    displayGroup = "UV"
                                    displayName = "UV Space Index"
                                    doc = "UV Space Index."
                                    hidden = false
                                )
                                bool inputs:world_or_object = 0 (
                                    customData = {
                                        bool default = 0
                                    }
                                    displayGroup = "UV"
                                    displayName = "Enable World Space"
                                    doc = "When enabled, uses world space for projection, otherwise object space is used"
                                    hidden = false
                                )
                                token outputs:out (
                                    renderType = "material"
                                )
                            }
                        }

                        over "FOF_Mesh_Magenta_BoxSG"
                        {
                            custom uniform bool paused = 0 (
                                customData = {
                                    bool nonpersistant = 1
                                }
                                hidden = true
                            )

                            over "Shader"
                            {
                                reorder properties = ["inputs:diffuse_color_constant", "inputs:diffuse_texture", "inputs:albedo_desaturation", "inputs:albedo_add", "inputs:albedo_brightness", "inputs:diffuse_tint", "inputs:reflection_roughness_constant", "inputs:reflection_roughness_texture_influence", "inputs:reflectionroughness_texture", "inputs:metallic_constant", "inputs:metallic_texture_influence", "inputs:metallic_texture", "inputs:specular_level", "inputs:enable_ORM_texture", "inputs:ORM_texture", "inputs:ao_to_diffuse", "inputs:ao_texture", "inputs:enable_emission", "inputs:emissive_color", "inputs:emissive_color_texture", "inputs:emissive_mask_texture", "inputs:emissive_intensity", "inputs:enable_opacity", "inputs:opacity_texture", "inputs:opacity_constant", "inputs:enable_opacity_texture", "inputs:opacity_mode", "inputs:opacity_threshold", "inputs:geometry_normal_roughness_strength", "inputs:bump_factor", "inputs:normalmap_texture", "inputs:detail_bump_factor", "inputs:detail_normalmap_texture", "inputs:flip_tangent_u", "inputs:flip_tangent_v", "inputs:project_uvw", "inputs:world_or_object", "inputs:uv_space_index", "inputs:texture_translate", "inputs:texture_rotate", "inputs:texture_scale", "inputs:detail_texture_translate", "inputs:detail_texture_rotate", "inputs:detail_texture_scale"]
                                float inputs:albedo_add = 0 (
                                    customData = {
                                        float default = 0
                                        dictionary soft_range = {
                                            float max = 1
                                            float min = -1
                                        }
                                    }
                                    displayGroup = "Albedo"
                                    displayName = "Albedo Add"
                                    doc = "Adds a constant value to the diffuse color "
                                    hidden = false
                                )
                                float inputs:albedo_brightness = 1 (
                                    customData = {
                                        float default = 1
                                        dictionary soft_range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "Albedo"
                                    displayName = "Albedo Brightness"
                                    doc = "Multiplier for the diffuse color "
                                    hidden = false
                                )
                                float inputs:albedo_desaturation = 0 (
                                    customData = {
                                        float default = 0
                                        dictionary soft_range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "Albedo"
                                    displayName = "Albedo Desaturation"
                                    doc = "Desaturates the diffuse color"
                                    hidden = false
                                )
                                asset inputs:ao_texture = @@ (
                                    colorSpace = "raw"
                                    customData = {
                                        asset default = @@
                                    }
                                    displayGroup = "AO"
                                    displayName = "Ambient Occlusion Map"
                                    doc = "The ambient occlusion texture for the material"
                                    hidden = false
                                    renderType = "texture_2d"
                                )
                                float inputs:ao_to_diffuse = 0 (
                                    customData = {
                                        float default = 0
                                        dictionary range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "AO"
                                    displayName = "AO to diffuse"
                                    doc = "Controls the amount of ambient occlusion multiplied against the diffuse color channel"
                                    hidden = false
                                )
                                float inputs:bump_factor = 1 (
                                    customData = {
                                        float default = 1
                                        dictionary soft_range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "Normal"
                                    displayName = "Normal Strength"
                                    doc = "Strength of normal map"
                                    hidden = false
                                )
                                float inputs:detail_bump_factor = 0.3 (
                                    customData = {
                                        float default = 0.3
                                        dictionary soft_range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "Normal"
                                    displayName = "Detail Normal Strength"
                                    doc = "Strength of the detail normal"
                                    hidden = false
                                )
                                asset inputs:detail_normalmap_texture = @@ (
                                    colorSpace = "raw"
                                    customData = {
                                        asset default = @@
                                    }
                                    displayGroup = "Normal"
                                    displayName = "Detail Normal Map"
                                    hidden = false
                                    renderType = "texture_2d"
                                )
                                float inputs:detail_texture_rotate = 0 (
                                    customData = {
                                        float default = 0
                                    }
                                    displayGroup = "UV"
                                    displayName = "Detail Texture Rotate"
                                    doc = "Rotates angle of the detail texture in degrees."
                                    hidden = false
                                )
                                float2 inputs:detail_texture_scale = (1, 1) (
                                    customData = {
                                        float2 default = (1, 1)
                                    }
                                    displayGroup = "UV"
                                    displayName = "Detail Texture Tiling"
                                    doc = "Controls the repetition of the detail texture."
                                    hidden = false
                                )
                                float2 inputs:detail_texture_translate = (0, 0) (
                                    customData = {
                                        float2 default = (0, 0)
                                    }
                                    displayGroup = "UV"
                                    displayName = "Detail Texture Translate"
                                    doc = "Controls the position of the detail texture."
                                    hidden = false
                                )
                                color3f inputs:diffuse_color_constant = (0.6722244, 0.12248751, 0.7257384) (
                                    displayName = "Albedo Color"
                                    doc = "This is the albedo base color"
                                    hidden = false
                                    renderType = "color"
                                )
                                asset inputs:diffuse_texture = @@ (
                                    hidden = false
                                    renderType = "texture_2d"
                                )
                                color3f inputs:diffuse_tint = (1, 1, 1) (
                                    customData = {
                                        float3 default = (1, 1, 1)
                                    }
                                    displayGroup = "Albedo"
                                    displayName = "Color Tint"
                                    doc = "When enabled, this color value is multiplied over the final albedo color"
                                    hidden = false
                                    renderType = "color"
                                )
                                color3f inputs:emissive_color = (1, 0.1, 0.1) (
                                    customData = {
                                        float3 default = (1, 0.1, 0.1)
                                    }
                                    displayGroup = "Emissive"
                                    displayName = "Emissive Color"
                                    doc = "The emission color"
                                    hidden = false
                                    renderType = "color"
                                )
                                asset inputs:emissive_color_texture = @@ (
                                    colorSpace = "auto"
                                    customData = {
                                        asset default = @@
                                    }
                                    displayGroup = "Emissive"
                                    displayName = "Emissive Color map"
                                    doc = "The emissive color texture"
                                    hidden = false
                                    renderType = "texture_2d"
                                )
                                float inputs:emissive_intensity = 40 (
                                    customData = {
                                        float default = 40
                                    }
                                    displayGroup = "Emissive"
                                    displayName = "Emissive Intensity"
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                                asset inputs:emissive_mask_texture = @@ (
                                    colorSpace = "raw"
                                    customData = {
                                        asset default = @@
                                    }
                                    displayGroup = "Emissive"
                                    displayName = "Emissive Mask map"
                                    doc = "The texture masking the emissive color"
                                    hidden = false
                                    renderType = "texture_2d"
                                )
                                bool inputs:enable_emission = 0 (
                                    customData = {
                                        bool default = 0
                                    }
                                    displayGroup = "Emissive"
                                    displayName = "Enable Emission"
                                    doc = "Enables the emission of light from the material"
                                    hidden = false
                                )
                                bool inputs:enable_opacity = 0 (
                                    customData = {
                                        bool default = 0
                                    }
                                    displayGroup = "Opacity"
                                    displayName = "Enable Opacity"
                                    doc = "Enables the use of cutout opacity"
                                    hidden = false
                                )
                                bool inputs:enable_opacity_texture = 0 (
                                    customData = {
                                        bool default = 0
                                    }
                                    displayGroup = "Opacity"
                                    displayName = "Enable Opacity Texture"
                                    doc = "Enables or disables the usage of the opacity texture map"
                                    hidden = false
                                )
                                bool inputs:enable_ORM_texture = 0 (
                                    customData = {
                                        bool default = 0
                                    }
                                    displayGroup = "Reflectivity"
                                    displayName = "Enable ORM Texture"
                                    doc = "The ORM texture will be used to extract the Occlusion, Roughness and Metallic textures from R,G,B channels"
                                    hidden = false
                                )
                                bool inputs:flip_tangent_u = 0 (
                                    customData = {
                                        bool default = 0
                                    }
                                    displayGroup = "Normal"
                                    displayName = "Normal Map Flip U Tangent"
                                    hidden = false
                                )
                                bool inputs:flip_tangent_v = 1 (
                                    customData = {
                                        bool default = 1
                                    }
                                    displayGroup = "Normal"
                                    displayName = "Normal Map Flip V Tangent"
                                    hidden = false
                                )
                                float inputs:geometry_normal_roughness_strength = 1 (
                                    customData = {
                                        float default = 1
                                        dictionary range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "Normal"
                                    displayName = "Normal map to roughness weight"
                                    doc = "Enables and weights roughness induced by normal maps"
                                    hidden = false
                                )
                                float inputs:metallic_constant = 0 (
                                    customData = {
                                        float default = 0
                                        dictionary range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "Reflectivity"
                                    displayName = "Metallic Amount"
                                    doc = "Metallic Material"
                                    hidden = false
                                )
                                asset inputs:metallic_texture = @@ (
                                    colorSpace = "raw"
                                    customData = {
                                        asset default = @@
                                    }
                                    displayGroup = "Reflectivity"
                                    displayName = "Metallic Map"
                                    hidden = false
                                    renderType = "texture_2d"
                                )
                                float inputs:metallic_texture_influence = 0 (
                                    customData = {
                                        float default = 0
                                        dictionary range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "Reflectivity"
                                    displayName = "Metallic Map Influence"
                                    doc = "Blends between the constant value and the lookup of the metallic texture"
                                    hidden = false
                                )
                                asset inputs:normalmap_texture = @@ (
                                    colorSpace = "raw"
                                    customData = {
                                        asset default = @@
                                    }
                                    displayGroup = "Normal"
                                    displayName = "Normal Map"
                                    hidden = false
                                    renderType = "texture_2d"
                                )
                                float inputs:opacity_constant = 1 (
                                    customData = {
                                        float default = 1
                                        dictionary range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "Opacity"
                                    displayName = "Opacity Amount"
                                    doc = "Opacity value between 0 and 1, when Opacity Map is not valid"
                                    hidden = false
                                )
                                int inputs:opacity_mode = 1 (
                                    customData = {
                                        int default = 1
                                    }
                                    displayGroup = "Opacity"
                                    displayName = "Opacity Mono Source"
                                    doc = "Determines how to lookup opacity from the supplied texture. mono_alpha, mono_average, mono_luminance, mono_maximum"
                                    hidden = false
                                    renderType = "mono_mode"
                                    sdrMetadata = {
                                        string __SDR__enum_value = "mono_average"
                                        string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                                    }
                                )
                                asset inputs:opacity_texture = @@ (
                                    colorSpace = "raw"
                                    customData = {
                                        asset default = @@
                                    }
                                    displayGroup = "Opacity"
                                    displayName = "Opacity Map"
                                    hidden = false
                                    renderType = "texture_2d"
                                )
                                float inputs:opacity_threshold = 0 (
                                    customData = {
                                        float default = 0
                                        dictionary range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "Opacity"
                                    displayName = "Opacity Threshold"
                                    doc = "If 0, use fractional opacity values 'as is'; if > 0, remap opacity values to 1 when >= threshold and to 0 otherwise"
                                    hidden = false
                                )
                                asset inputs:ORM_texture = @@ (
                                    colorSpace = "raw"
                                    customData = {
                                        asset default = @@
                                    }
                                    displayGroup = "Reflectivity"
                                    displayName = "ORM Map"
                                    doc = "Texture that has Occlusion, Roughness and Metallic maps stored in their respective R, G and B channels"
                                    hidden = false
                                    renderType = "texture_2d"
                                )
                                bool inputs:project_uvw = 0 (
                                    customData = {
                                        bool default = 0
                                    }
                                    displayGroup = "UV"
                                    displayName = "Enable Project UVW Coordinates"
                                    doc = "When enabled, UV coordinates will be generated by projecting them from a coordinate system"
                                    hidden = false
                                )
                                float inputs:reflection_roughness_constant = 0.5 (
                                    customData = {
                                        float default = 0.5
                                        dictionary range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "Reflectivity"
                                    displayName = "Roughness Amount"
                                    doc = "Higher roughness values lead to more blurry reflections"
                                    hidden = false
                                )
                                float inputs:reflection_roughness_texture_influence = 0 (
                                    customData = {
                                        float default = 0
                                        dictionary range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "Reflectivity"
                                    displayName = "Roughness Map Influence"
                                    doc = "Blends between the constant value and the lookup of the roughness texture"
                                    hidden = false
                                )
                                asset inputs:reflectionroughness_texture = @@ (
                                    colorSpace = "raw"
                                    customData = {
                                        asset default = @@
                                    }
                                    displayGroup = "Reflectivity"
                                    displayName = "Roughness Map"
                                    hidden = false
                                    renderType = "texture_2d"
                                )
                                float inputs:specular_level = 0.5 (
                                    customData = {
                                        float default = 0.5
                                        dictionary soft_range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "Reflectivity"
                                    displayName = "Specular"
                                    doc = "The specular level (intensity) of the material"
                                    hidden = false
                                )
                                float inputs:texture_rotate = 0 (
                                    customData = {
                                        float default = 0
                                    }
                                    displayGroup = "UV"
                                    displayName = "Texture Rotate"
                                    doc = "Rotates angle of texture in degrees."
                                    hidden = false
                                )
                                float2 inputs:texture_scale = (1, 1) (
                                    customData = {
                                        float2 default = (1, 1)
                                    }
                                    displayGroup = "UV"
                                    displayName = "Texture Tiling"
                                    doc = "Controls the repetition of the texture."
                                    hidden = false
                                )
                                float2 inputs:texture_translate = (0, 0) (
                                    customData = {
                                        float2 default = (0, 0)
                                    }
                                    displayGroup = "UV"
                                    displayName = "Texture Translate"
                                    doc = "Controls position of texture."
                                    hidden = false
                                )
                                int inputs:uv_space_index = 0 (
                                    customData = {
                                        int default = 0
                                        dictionary range = {
                                            int max = 3
                                            int min = 0
                                        }
                                    }
                                    displayGroup = "UV"
                                    displayName = "UV Space Index"
                                    doc = "UV Space Index."
                                    hidden = false
                                )
                                bool inputs:world_or_object = 0 (
                                    customData = {
                                        bool default = 0
                                    }
                                    displayGroup = "UV"
                                    displayName = "Enable World Space"
                                    doc = "When enabled, uses world space for projection, otherwise object space is used"
                                    hidden = false
                                )
                                token outputs:out (
                                    renderType = "material"
                                )
                            }
                        }
                    }

                    over "FOF_Mesh_Label_1"
                    {
                        token visibility = "inherited"
                    }

                    over "FOF_Mesh_Label_6_Small"
                    {
                        token visibility = "invisible"
                    }

                    over "FOF_Mesh_Magenta_Box" (
                        prepend apiSchemas = ["PhysxTriangleMeshSimplificationCollisionAPI"]
                    )
                    {
                        uniform token physics:approximation = "meshSimplification"
                    }
                }
            }

            def "basket3" (
                prepend payload = @http://omniverse-content-production.s3-us-west-2.amazonaws.com/Assets/Isaac/4.1/Isaac/Props/KLT_Bin/small_KLT_visual_collision.usd@
            )
            {
                float3 xformOp:rotateXYZ = (0, 0, -90)
                float3 xformOp:scale = (2.1, 2, 2.5)
                double3 xformOp:translate = (0, 0.46, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "Visuals"
                {
                    over "Looks"
                    {
                        over "FOF_Mesh_LabelsSG"
                        {
                            custom uniform bool paused = 0 (
                                customData = {
                                    bool nonpersistant = 1
                                }
                                hidden = true
                            )

                            over "Shader"
                            {
                                reorder properties = ["inputs:diffuse_color_constant", "inputs:diffuse_texture", "inputs:albedo_desaturation", "inputs:albedo_add", "inputs:albedo_brightness", "inputs:diffuse_tint", "inputs:reflection_roughness_constant", "inputs:reflection_roughness_texture_influence", "inputs:reflectionroughness_texture", "inputs:metallic_constant", "inputs:metallic_texture_influence", "inputs:metallic_texture", "inputs:specular_level", "inputs:enable_ORM_texture", "inputs:ORM_texture", "inputs:ao_to_diffuse", "inputs:ao_texture", "inputs:enable_emission", "inputs:emissive_color", "inputs:emissive_color_texture", "inputs:emissive_mask_texture", "inputs:emissive_intensity", "inputs:enable_opacity", "inputs:opacity_texture", "inputs:opacity_constant", "inputs:enable_opacity_texture", "inputs:opacity_mode", "inputs:opacity_threshold", "inputs:geometry_normal_roughness_strength", "inputs:bump_factor", "inputs:normalmap_texture", "inputs:detail_bump_factor", "inputs:detail_normalmap_texture", "inputs:flip_tangent_u", "inputs:flip_tangent_v", "inputs:project_uvw", "inputs:world_or_object", "inputs:uv_space_index", "inputs:texture_translate", "inputs:texture_rotate", "inputs:texture_scale", "inputs:detail_texture_translate", "inputs:detail_texture_rotate", "inputs:detail_texture_scale"]
                                float inputs:albedo_add = 0 (
                                    customData = {
                                        float default = 0
                                        dictionary soft_range = {
                                            float max = 1
                                            float min = -1
                                        }
                                    }
                                    displayGroup = "Albedo"
                                    displayName = "Albedo Add"
                                    doc = "Adds a constant value to the diffuse color "
                                    hidden = false
                                )
                                float inputs:albedo_brightness = 1 (
                                    customData = {
                                        float default = 1
                                        dictionary soft_range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "Albedo"
                                    displayName = "Albedo Brightness"
                                    doc = "Multiplier for the diffuse color "
                                    hidden = false
                                )
                                float inputs:albedo_desaturation = 0 (
                                    customData = {
                                        float default = 0
                                        dictionary soft_range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "Albedo"
                                    displayName = "Albedo Desaturation"
                                    doc = "Desaturates the diffuse color"
                                    hidden = false
                                )
                                asset inputs:ao_texture = @@ (
                                    colorSpace = "raw"
                                    customData = {
                                        asset default = @@
                                    }
                                    displayGroup = "AO"
                                    displayName = "Ambient Occlusion Map"
                                    doc = "The ambient occlusion texture for the material"
                                    hidden = false
                                    renderType = "texture_2d"
                                )
                                float inputs:ao_to_diffuse = 0 (
                                    customData = {
                                        float default = 0
                                        dictionary range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "AO"
                                    displayName = "AO to diffuse"
                                    doc = "Controls the amount of ambient occlusion multiplied against the diffuse color channel"
                                    hidden = false
                                )
                                float inputs:bump_factor = 1 (
                                    customData = {
                                        float default = 1
                                        dictionary soft_range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "Normal"
                                    displayName = "Normal Strength"
                                    doc = "Strength of normal map"
                                    hidden = false
                                )
                                float inputs:detail_bump_factor = 0.3 (
                                    customData = {
                                        float default = 0.3
                                        dictionary soft_range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "Normal"
                                    displayName = "Detail Normal Strength"
                                    doc = "Strength of the detail normal"
                                    hidden = false
                                )
                                asset inputs:detail_normalmap_texture = @@ (
                                    colorSpace = "raw"
                                    customData = {
                                        asset default = @@
                                    }
                                    displayGroup = "Normal"
                                    displayName = "Detail Normal Map"
                                    hidden = false
                                    renderType = "texture_2d"
                                )
                                float inputs:detail_texture_rotate = 0 (
                                    customData = {
                                        float default = 0
                                    }
                                    displayGroup = "UV"
                                    displayName = "Detail Texture Rotate"
                                    doc = "Rotates angle of the detail texture in degrees."
                                    hidden = false
                                )
                                float2 inputs:detail_texture_scale = (1, 1) (
                                    customData = {
                                        float2 default = (1, 1)
                                    }
                                    displayGroup = "UV"
                                    displayName = "Detail Texture Tiling"
                                    doc = "Controls the repetition of the detail texture."
                                    hidden = false
                                )
                                float2 inputs:detail_texture_translate = (0, 0) (
                                    customData = {
                                        float2 default = (0, 0)
                                    }
                                    displayGroup = "UV"
                                    displayName = "Detail Texture Translate"
                                    doc = "Controls the position of the detail texture."
                                    hidden = false
                                )
                                color3f inputs:diffuse_color_constant (
                                    displayName = "Albedo Color"
                                    doc = "This is the albedo base color"
                                    hidden = false
                                    renderType = "color"
                                )
                                asset inputs:diffuse_texture (
                                    colorSpace = "auto"
                                    hidden = false
                                    renderType = "texture_2d"
                                )
                                color3f inputs:diffuse_tint = (1, 1, 1) (
                                    customData = {
                                        float3 default = (1, 1, 1)
                                    }
                                    displayGroup = "Albedo"
                                    displayName = "Color Tint"
                                    doc = "When enabled, this color value is multiplied over the final albedo color"
                                    hidden = false
                                    renderType = "color"
                                )
                                color3f inputs:emissive_color = (1, 0.1, 0.1) (
                                    customData = {
                                        float3 default = (1, 0.1, 0.1)
                                    }
                                    displayGroup = "Emissive"
                                    displayName = "Emissive Color"
                                    doc = "The emission color"
                                    hidden = false
                                    renderType = "color"
                                )
                                asset inputs:emissive_color_texture = @@ (
                                    colorSpace = "auto"
                                    customData = {
                                        asset default = @@
                                    }
                                    displayGroup = "Emissive"
                                    displayName = "Emissive Color map"
                                    doc = "The emissive color texture"
                                    hidden = false
                                    renderType = "texture_2d"
                                )
                                float inputs:emissive_intensity = 40 (
                                    customData = {
                                        float default = 40
                                    }
                                    displayGroup = "Emissive"
                                    displayName = "Emissive Intensity"
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                                asset inputs:emissive_mask_texture = @@ (
                                    colorSpace = "raw"
                                    customData = {
                                        asset default = @@
                                    }
                                    displayGroup = "Emissive"
                                    displayName = "Emissive Mask map"
                                    doc = "The texture masking the emissive color"
                                    hidden = false
                                    renderType = "texture_2d"
                                )
                                bool inputs:enable_emission = 0 (
                                    customData = {
                                        bool default = 0
                                    }
                                    displayGroup = "Emissive"
                                    displayName = "Enable Emission"
                                    doc = "Enables the emission of light from the material"
                                    hidden = false
                                )
                                bool inputs:enable_opacity = 0 (
                                    customData = {
                                        bool default = 0
                                    }
                                    displayGroup = "Opacity"
                                    displayName = "Enable Opacity"
                                    doc = "Enables the use of cutout opacity"
                                    hidden = false
                                )
                                bool inputs:enable_opacity_texture = 0 (
                                    customData = {
                                        bool default = 0
                                    }
                                    displayGroup = "Opacity"
                                    displayName = "Enable Opacity Texture"
                                    doc = "Enables or disables the usage of the opacity texture map"
                                    hidden = false
                                )
                                bool inputs:enable_ORM_texture = 0 (
                                    customData = {
                                        bool default = 0
                                    }
                                    displayGroup = "Reflectivity"
                                    displayName = "Enable ORM Texture"
                                    doc = "The ORM texture will be used to extract the Occlusion, Roughness and Metallic textures from R,G,B channels"
                                    hidden = false
                                )
                                bool inputs:flip_tangent_u = 0 (
                                    customData = {
                                        bool default = 0
                                    }
                                    displayGroup = "Normal"
                                    displayName = "Normal Map Flip U Tangent"
                                    hidden = false
                                )
                                bool inputs:flip_tangent_v = 1 (
                                    customData = {
                                        bool default = 1
                                    }
                                    displayGroup = "Normal"
                                    displayName = "Normal Map Flip V Tangent"
                                    hidden = false
                                )
                                float inputs:geometry_normal_roughness_strength = 1 (
                                    customData = {
                                        float default = 1
                                        dictionary range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "Normal"
                                    displayName = "Normal map to roughness weight"
                                    doc = "Enables and weights roughness induced by normal maps"
                                    hidden = false
                                )
                                float inputs:metallic_constant = 0 (
                                    customData = {
                                        float default = 0
                                        dictionary range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "Reflectivity"
                                    displayName = "Metallic Amount"
                                    doc = "Metallic Material"
                                    hidden = false
                                )
                                asset inputs:metallic_texture = @@ (
                                    colorSpace = "raw"
                                    customData = {
                                        asset default = @@
                                    }
                                    displayGroup = "Reflectivity"
                                    displayName = "Metallic Map"
                                    hidden = false
                                    renderType = "texture_2d"
                                )
                                float inputs:metallic_texture_influence = 0 (
                                    customData = {
                                        float default = 0
                                        dictionary range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "Reflectivity"
                                    displayName = "Metallic Map Influence"
                                    doc = "Blends between the constant value and the lookup of the metallic texture"
                                    hidden = false
                                )
                                asset inputs:normalmap_texture = @@ (
                                    colorSpace = "raw"
                                    customData = {
                                        asset default = @@
                                    }
                                    displayGroup = "Normal"
                                    displayName = "Normal Map"
                                    hidden = false
                                    renderType = "texture_2d"
                                )
                                float inputs:opacity_constant = 1 (
                                    customData = {
                                        float default = 1
                                        dictionary range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "Opacity"
                                    displayName = "Opacity Amount"
                                    doc = "Opacity value between 0 and 1, when Opacity Map is not valid"
                                    hidden = false
                                )
                                int inputs:opacity_mode = 1 (
                                    customData = {
                                        int default = 1
                                    }
                                    displayGroup = "Opacity"
                                    displayName = "Opacity Mono Source"
                                    doc = "Determines how to lookup opacity from the supplied texture. mono_alpha, mono_average, mono_luminance, mono_maximum"
                                    hidden = false
                                    renderType = "mono_mode"
                                    sdrMetadata = {
                                        string __SDR__enum_value = "mono_average"
                                        string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                                    }
                                )
                                asset inputs:opacity_texture = @@ (
                                    colorSpace = "raw"
                                    customData = {
                                        asset default = @@
                                    }
                                    displayGroup = "Opacity"
                                    displayName = "Opacity Map"
                                    hidden = false
                                    renderType = "texture_2d"
                                )
                                float inputs:opacity_threshold = 0 (
                                    customData = {
                                        float default = 0
                                        dictionary range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "Opacity"
                                    displayName = "Opacity Threshold"
                                    doc = "If 0, use fractional opacity values 'as is'; if > 0, remap opacity values to 1 when >= threshold and to 0 otherwise"
                                    hidden = false
                                )
                                asset inputs:ORM_texture = @@ (
                                    colorSpace = "raw"
                                    customData = {
                                        asset default = @@
                                    }
                                    displayGroup = "Reflectivity"
                                    displayName = "ORM Map"
                                    doc = "Texture that has Occlusion, Roughness and Metallic maps stored in their respective R, G and B channels"
                                    hidden = false
                                    renderType = "texture_2d"
                                )
                                bool inputs:project_uvw = 0 (
                                    customData = {
                                        bool default = 0
                                    }
                                    displayGroup = "UV"
                                    displayName = "Enable Project UVW Coordinates"
                                    doc = "When enabled, UV coordinates will be generated by projecting them from a coordinate system"
                                    hidden = false
                                )
                                float inputs:reflection_roughness_constant = 0.5 (
                                    customData = {
                                        float default = 0.5
                                        dictionary range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "Reflectivity"
                                    displayName = "Roughness Amount"
                                    doc = "Higher roughness values lead to more blurry reflections"
                                    hidden = false
                                )
                                float inputs:reflection_roughness_texture_influence = 0 (
                                    customData = {
                                        float default = 0
                                        dictionary range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "Reflectivity"
                                    displayName = "Roughness Map Influence"
                                    doc = "Blends between the constant value and the lookup of the roughness texture"
                                    hidden = false
                                )
                                asset inputs:reflectionroughness_texture = @@ (
                                    colorSpace = "raw"
                                    customData = {
                                        asset default = @@
                                    }
                                    displayGroup = "Reflectivity"
                                    displayName = "Roughness Map"
                                    hidden = false
                                    renderType = "texture_2d"
                                )
                                float inputs:specular_level = 0.5 (
                                    customData = {
                                        float default = 0.5
                                        dictionary soft_range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "Reflectivity"
                                    displayName = "Specular"
                                    doc = "The specular level (intensity) of the material"
                                    hidden = false
                                )
                                float inputs:texture_rotate = 0 (
                                    customData = {
                                        float default = 0
                                    }
                                    displayGroup = "UV"
                                    displayName = "Texture Rotate"
                                    doc = "Rotates angle of texture in degrees."
                                    hidden = false
                                )
                                float2 inputs:texture_scale = (1, 1) (
                                    customData = {
                                        float2 default = (1, 1)
                                    }
                                    displayGroup = "UV"
                                    displayName = "Texture Tiling"
                                    doc = "Controls the repetition of the texture."
                                    hidden = false
                                )
                                float2 inputs:texture_translate = (0, 0) (
                                    customData = {
                                        float2 default = (0, 0)
                                    }
                                    displayGroup = "UV"
                                    displayName = "Texture Translate"
                                    doc = "Controls position of texture."
                                    hidden = false
                                )
                                int inputs:uv_space_index = 0 (
                                    customData = {
                                        int default = 0
                                        dictionary range = {
                                            int max = 3
                                            int min = 0
                                        }
                                    }
                                    displayGroup = "UV"
                                    displayName = "UV Space Index"
                                    doc = "UV Space Index."
                                    hidden = false
                                )
                                bool inputs:world_or_object = 0 (
                                    customData = {
                                        bool default = 0
                                    }
                                    displayGroup = "UV"
                                    displayName = "Enable World Space"
                                    doc = "When enabled, uses world space for projection, otherwise object space is used"
                                    hidden = false
                                )
                                token outputs:out (
                                    renderType = "material"
                                )
                            }
                        }

                        over "FOF_Mesh_StickerSG"
                        {
                            custom uniform bool paused = 0 (
                                customData = {
                                    bool nonpersistant = 1
                                }
                                hidden = true
                            )

                            over "Shader"
                            {
                                reorder properties = ["inputs:diffuse_color_constant", "inputs:diffuse_texture", "inputs:albedo_desaturation", "inputs:albedo_add", "inputs:albedo_brightness", "inputs:diffuse_tint", "inputs:reflection_roughness_constant", "inputs:reflection_roughness_texture_influence", "inputs:reflectionroughness_texture", "inputs:metallic_constant", "inputs:metallic_texture_influence", "inputs:metallic_texture", "inputs:specular_level", "inputs:enable_ORM_texture", "inputs:ORM_texture", "inputs:ao_to_diffuse", "inputs:ao_texture", "inputs:enable_emission", "inputs:emissive_color", "inputs:emissive_color_texture", "inputs:emissive_mask_texture", "inputs:emissive_intensity", "inputs:enable_opacity", "inputs:opacity_texture", "inputs:opacity_constant", "inputs:enable_opacity_texture", "inputs:opacity_mode", "inputs:opacity_threshold", "inputs:geometry_normal_roughness_strength", "inputs:bump_factor", "inputs:normalmap_texture", "inputs:detail_bump_factor", "inputs:detail_normalmap_texture", "inputs:flip_tangent_u", "inputs:flip_tangent_v", "inputs:project_uvw", "inputs:world_or_object", "inputs:uv_space_index", "inputs:texture_translate", "inputs:texture_rotate", "inputs:texture_scale", "inputs:detail_texture_translate", "inputs:detail_texture_rotate", "inputs:detail_texture_scale"]
                                float inputs:albedo_add = 0 (
                                    customData = {
                                        float default = 0
                                        dictionary soft_range = {
                                            float max = 1
                                            float min = -1
                                        }
                                    }
                                    displayGroup = "Albedo"
                                    displayName = "Albedo Add"
                                    doc = "Adds a constant value to the diffuse color "
                                    hidden = false
                                )
                                float inputs:albedo_brightness = 1 (
                                    customData = {
                                        float default = 1
                                        dictionary soft_range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "Albedo"
                                    displayName = "Albedo Brightness"
                                    doc = "Multiplier for the diffuse color "
                                    hidden = false
                                )
                                float inputs:albedo_desaturation = 0 (
                                    customData = {
                                        float default = 0
                                        dictionary soft_range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "Albedo"
                                    displayName = "Albedo Desaturation"
                                    doc = "Desaturates the diffuse color"
                                    hidden = false
                                )
                                asset inputs:ao_texture = @@ (
                                    colorSpace = "raw"
                                    customData = {
                                        asset default = @@
                                    }
                                    displayGroup = "AO"
                                    displayName = "Ambient Occlusion Map"
                                    doc = "The ambient occlusion texture for the material"
                                    hidden = false
                                    renderType = "texture_2d"
                                )
                                float inputs:ao_to_diffuse = 0 (
                                    customData = {
                                        float default = 0
                                        dictionary range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "AO"
                                    displayName = "AO to diffuse"
                                    doc = "Controls the amount of ambient occlusion multiplied against the diffuse color channel"
                                    hidden = false
                                )
                                float inputs:bump_factor = 1 (
                                    customData = {
                                        float default = 1
                                        dictionary soft_range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "Normal"
                                    displayName = "Normal Strength"
                                    doc = "Strength of normal map"
                                    hidden = false
                                )
                                float inputs:detail_bump_factor = 0.3 (
                                    customData = {
                                        float default = 0.3
                                        dictionary soft_range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "Normal"
                                    displayName = "Detail Normal Strength"
                                    doc = "Strength of the detail normal"
                                    hidden = false
                                )
                                asset inputs:detail_normalmap_texture = @@ (
                                    colorSpace = "raw"
                                    customData = {
                                        asset default = @@
                                    }
                                    displayGroup = "Normal"
                                    displayName = "Detail Normal Map"
                                    hidden = false
                                    renderType = "texture_2d"
                                )
                                float inputs:detail_texture_rotate = 0 (
                                    customData = {
                                        float default = 0
                                    }
                                    displayGroup = "UV"
                                    displayName = "Detail Texture Rotate"
                                    doc = "Rotates angle of the detail texture in degrees."
                                    hidden = false
                                )
                                float2 inputs:detail_texture_scale = (1, 1) (
                                    customData = {
                                        float2 default = (1, 1)
                                    }
                                    displayGroup = "UV"
                                    displayName = "Detail Texture Tiling"
                                    doc = "Controls the repetition of the detail texture."
                                    hidden = false
                                )
                                float2 inputs:detail_texture_translate = (0, 0) (
                                    customData = {
                                        float2 default = (0, 0)
                                    }
                                    displayGroup = "UV"
                                    displayName = "Detail Texture Translate"
                                    doc = "Controls the position of the detail texture."
                                    hidden = false
                                )
                                color3f inputs:diffuse_color_constant (
                                    displayName = "Albedo Color"
                                    doc = "This is the albedo base color"
                                    hidden = false
                                    renderType = "color"
                                )
                                asset inputs:diffuse_texture (
                                    colorSpace = "auto"
                                    hidden = false
                                    renderType = "texture_2d"
                                )
                                color3f inputs:diffuse_tint = (1, 1, 1) (
                                    customData = {
                                        float3 default = (1, 1, 1)
                                    }
                                    displayGroup = "Albedo"
                                    displayName = "Color Tint"
                                    doc = "When enabled, this color value is multiplied over the final albedo color"
                                    hidden = false
                                    renderType = "color"
                                )
                                color3f inputs:emissive_color = (1, 0.1, 0.1) (
                                    customData = {
                                        float3 default = (1, 0.1, 0.1)
                                    }
                                    displayGroup = "Emissive"
                                    displayName = "Emissive Color"
                                    doc = "The emission color"
                                    hidden = false
                                    renderType = "color"
                                )
                                asset inputs:emissive_color_texture = @@ (
                                    colorSpace = "auto"
                                    customData = {
                                        asset default = @@
                                    }
                                    displayGroup = "Emissive"
                                    displayName = "Emissive Color map"
                                    doc = "The emissive color texture"
                                    hidden = false
                                    renderType = "texture_2d"
                                )
                                float inputs:emissive_intensity = 40 (
                                    customData = {
                                        float default = 40
                                    }
                                    displayGroup = "Emissive"
                                    displayName = "Emissive Intensity"
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                                asset inputs:emissive_mask_texture = @@ (
                                    colorSpace = "raw"
                                    customData = {
                                        asset default = @@
                                    }
                                    displayGroup = "Emissive"
                                    displayName = "Emissive Mask map"
                                    doc = "The texture masking the emissive color"
                                    hidden = false
                                    renderType = "texture_2d"
                                )
                                bool inputs:enable_emission = 0 (
                                    customData = {
                                        bool default = 0
                                    }
                                    displayGroup = "Emissive"
                                    displayName = "Enable Emission"
                                    doc = "Enables the emission of light from the material"
                                    hidden = false
                                )
                                bool inputs:enable_opacity = 0 (
                                    customData = {
                                        bool default = 0
                                    }
                                    displayGroup = "Opacity"
                                    displayName = "Enable Opacity"
                                    doc = "Enables the use of cutout opacity"
                                    hidden = false
                                )
                                bool inputs:enable_opacity_texture = 0 (
                                    customData = {
                                        bool default = 0
                                    }
                                    displayGroup = "Opacity"
                                    displayName = "Enable Opacity Texture"
                                    doc = "Enables or disables the usage of the opacity texture map"
                                    hidden = false
                                )
                                bool inputs:enable_ORM_texture = 0 (
                                    customData = {
                                        bool default = 0
                                    }
                                    displayGroup = "Reflectivity"
                                    displayName = "Enable ORM Texture"
                                    doc = "The ORM texture will be used to extract the Occlusion, Roughness and Metallic textures from R,G,B channels"
                                    hidden = false
                                )
                                bool inputs:flip_tangent_u = 0 (
                                    customData = {
                                        bool default = 0
                                    }
                                    displayGroup = "Normal"
                                    displayName = "Normal Map Flip U Tangent"
                                    hidden = false
                                )
                                bool inputs:flip_tangent_v = 1 (
                                    customData = {
                                        bool default = 1
                                    }
                                    displayGroup = "Normal"
                                    displayName = "Normal Map Flip V Tangent"
                                    hidden = false
                                )
                                float inputs:geometry_normal_roughness_strength = 1 (
                                    customData = {
                                        float default = 1
                                        dictionary range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "Normal"
                                    displayName = "Normal map to roughness weight"
                                    doc = "Enables and weights roughness induced by normal maps"
                                    hidden = false
                                )
                                float inputs:metallic_constant = 0 (
                                    customData = {
                                        float default = 0
                                        dictionary range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "Reflectivity"
                                    displayName = "Metallic Amount"
                                    doc = "Metallic Material"
                                    hidden = false
                                )
                                asset inputs:metallic_texture = @@ (
                                    colorSpace = "raw"
                                    customData = {
                                        asset default = @@
                                    }
                                    displayGroup = "Reflectivity"
                                    displayName = "Metallic Map"
                                    hidden = false
                                    renderType = "texture_2d"
                                )
                                float inputs:metallic_texture_influence = 0 (
                                    customData = {
                                        float default = 0
                                        dictionary range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "Reflectivity"
                                    displayName = "Metallic Map Influence"
                                    doc = "Blends between the constant value and the lookup of the metallic texture"
                                    hidden = false
                                )
                                asset inputs:normalmap_texture = @@ (
                                    colorSpace = "raw"
                                    customData = {
                                        asset default = @@
                                    }
                                    displayGroup = "Normal"
                                    displayName = "Normal Map"
                                    hidden = false
                                    renderType = "texture_2d"
                                )
                                float inputs:opacity_constant = 1 (
                                    customData = {
                                        float default = 1
                                        dictionary range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "Opacity"
                                    displayName = "Opacity Amount"
                                    doc = "Opacity value between 0 and 1, when Opacity Map is not valid"
                                    hidden = false
                                )
                                int inputs:opacity_mode = 1 (
                                    customData = {
                                        int default = 1
                                    }
                                    displayGroup = "Opacity"
                                    displayName = "Opacity Mono Source"
                                    doc = "Determines how to lookup opacity from the supplied texture. mono_alpha, mono_average, mono_luminance, mono_maximum"
                                    hidden = false
                                    renderType = "mono_mode"
                                    sdrMetadata = {
                                        string __SDR__enum_value = "mono_average"
                                        string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                                    }
                                )
                                asset inputs:opacity_texture = @@ (
                                    colorSpace = "raw"
                                    customData = {
                                        asset default = @@
                                    }
                                    displayGroup = "Opacity"
                                    displayName = "Opacity Map"
                                    hidden = false
                                    renderType = "texture_2d"
                                )
                                float inputs:opacity_threshold = 0 (
                                    customData = {
                                        float default = 0
                                        dictionary range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "Opacity"
                                    displayName = "Opacity Threshold"
                                    doc = "If 0, use fractional opacity values 'as is'; if > 0, remap opacity values to 1 when >= threshold and to 0 otherwise"
                                    hidden = false
                                )
                                asset inputs:ORM_texture = @@ (
                                    colorSpace = "raw"
                                    customData = {
                                        asset default = @@
                                    }
                                    displayGroup = "Reflectivity"
                                    displayName = "ORM Map"
                                    doc = "Texture that has Occlusion, Roughness and Metallic maps stored in their respective R, G and B channels"
                                    hidden = false
                                    renderType = "texture_2d"
                                )
                                bool inputs:project_uvw = 0 (
                                    customData = {
                                        bool default = 0
                                    }
                                    displayGroup = "UV"
                                    displayName = "Enable Project UVW Coordinates"
                                    doc = "When enabled, UV coordinates will be generated by projecting them from a coordinate system"
                                    hidden = false
                                )
                                float inputs:reflection_roughness_constant = 0.5 (
                                    customData = {
                                        float default = 0.5
                                        dictionary range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "Reflectivity"
                                    displayName = "Roughness Amount"
                                    doc = "Higher roughness values lead to more blurry reflections"
                                    hidden = false
                                )
                                float inputs:reflection_roughness_texture_influence = 0 (
                                    customData = {
                                        float default = 0
                                        dictionary range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "Reflectivity"
                                    displayName = "Roughness Map Influence"
                                    doc = "Blends between the constant value and the lookup of the roughness texture"
                                    hidden = false
                                )
                                asset inputs:reflectionroughness_texture = @@ (
                                    colorSpace = "raw"
                                    customData = {
                                        asset default = @@
                                    }
                                    displayGroup = "Reflectivity"
                                    displayName = "Roughness Map"
                                    hidden = false
                                    renderType = "texture_2d"
                                )
                                float inputs:specular_level = 0.5 (
                                    customData = {
                                        float default = 0.5
                                        dictionary soft_range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "Reflectivity"
                                    displayName = "Specular"
                                    doc = "The specular level (intensity) of the material"
                                    hidden = false
                                )
                                float inputs:texture_rotate = 0 (
                                    customData = {
                                        float default = 0
                                    }
                                    displayGroup = "UV"
                                    displayName = "Texture Rotate"
                                    doc = "Rotates angle of texture in degrees."
                                    hidden = false
                                )
                                float2 inputs:texture_scale = (1, 1) (
                                    customData = {
                                        float2 default = (1, 1)
                                    }
                                    displayGroup = "UV"
                                    displayName = "Texture Tiling"
                                    doc = "Controls the repetition of the texture."
                                    hidden = false
                                )
                                float2 inputs:texture_translate = (0, 0) (
                                    customData = {
                                        float2 default = (0, 0)
                                    }
                                    displayGroup = "UV"
                                    displayName = "Texture Translate"
                                    doc = "Controls position of texture."
                                    hidden = false
                                )
                                int inputs:uv_space_index = 0 (
                                    customData = {
                                        int default = 0
                                        dictionary range = {
                                            int max = 3
                                            int min = 0
                                        }
                                    }
                                    displayGroup = "UV"
                                    displayName = "UV Space Index"
                                    doc = "UV Space Index."
                                    hidden = false
                                )
                                bool inputs:world_or_object = 0 (
                                    customData = {
                                        bool default = 0
                                    }
                                    displayGroup = "UV"
                                    displayName = "Enable World Space"
                                    doc = "When enabled, uses world space for projection, otherwise object space is used"
                                    hidden = false
                                )
                                token outputs:out (
                                    renderType = "material"
                                )
                            }
                        }

                        over "FOF_Mesh_Magenta_BoxSG"
                        {
                            custom uniform bool paused = 0 (
                                customData = {
                                    bool nonpersistant = 1
                                }
                                hidden = true
                            )

                            over "Shader"
                            {
                                reorder properties = ["inputs:diffuse_color_constant", "inputs:diffuse_texture", "inputs:albedo_desaturation", "inputs:albedo_add", "inputs:albedo_brightness", "inputs:diffuse_tint", "inputs:reflection_roughness_constant", "inputs:reflection_roughness_texture_influence", "inputs:reflectionroughness_texture", "inputs:metallic_constant", "inputs:metallic_texture_influence", "inputs:metallic_texture", "inputs:specular_level", "inputs:enable_ORM_texture", "inputs:ORM_texture", "inputs:ao_to_diffuse", "inputs:ao_texture", "inputs:enable_emission", "inputs:emissive_color", "inputs:emissive_color_texture", "inputs:emissive_mask_texture", "inputs:emissive_intensity", "inputs:enable_opacity", "inputs:opacity_texture", "inputs:opacity_constant", "inputs:enable_opacity_texture", "inputs:opacity_mode", "inputs:opacity_threshold", "inputs:geometry_normal_roughness_strength", "inputs:bump_factor", "inputs:normalmap_texture", "inputs:detail_bump_factor", "inputs:detail_normalmap_texture", "inputs:flip_tangent_u", "inputs:flip_tangent_v", "inputs:project_uvw", "inputs:world_or_object", "inputs:uv_space_index", "inputs:texture_translate", "inputs:texture_rotate", "inputs:texture_scale", "inputs:detail_texture_translate", "inputs:detail_texture_rotate", "inputs:detail_texture_scale"]
                                float inputs:albedo_add = 0 (
                                    customData = {
                                        float default = 0
                                        dictionary soft_range = {
                                            float max = 1
                                            float min = -1
                                        }
                                    }
                                    displayGroup = "Albedo"
                                    displayName = "Albedo Add"
                                    doc = "Adds a constant value to the diffuse color "
                                    hidden = false
                                )
                                float inputs:albedo_brightness = 1 (
                                    customData = {
                                        float default = 1
                                        dictionary soft_range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "Albedo"
                                    displayName = "Albedo Brightness"
                                    doc = "Multiplier for the diffuse color "
                                    hidden = false
                                )
                                float inputs:albedo_desaturation = 0 (
                                    customData = {
                                        float default = 0
                                        dictionary soft_range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "Albedo"
                                    displayName = "Albedo Desaturation"
                                    doc = "Desaturates the diffuse color"
                                    hidden = false
                                )
                                asset inputs:ao_texture = @@ (
                                    colorSpace = "raw"
                                    customData = {
                                        asset default = @@
                                    }
                                    displayGroup = "AO"
                                    displayName = "Ambient Occlusion Map"
                                    doc = "The ambient occlusion texture for the material"
                                    hidden = false
                                    renderType = "texture_2d"
                                )
                                float inputs:ao_to_diffuse = 0 (
                                    customData = {
                                        float default = 0
                                        dictionary range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "AO"
                                    displayName = "AO to diffuse"
                                    doc = "Controls the amount of ambient occlusion multiplied against the diffuse color channel"
                                    hidden = false
                                )
                                float inputs:bump_factor = 1 (
                                    customData = {
                                        float default = 1
                                        dictionary soft_range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "Normal"
                                    displayName = "Normal Strength"
                                    doc = "Strength of normal map"
                                    hidden = false
                                )
                                float inputs:detail_bump_factor = 0.3 (
                                    customData = {
                                        float default = 0.3
                                        dictionary soft_range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "Normal"
                                    displayName = "Detail Normal Strength"
                                    doc = "Strength of the detail normal"
                                    hidden = false
                                )
                                asset inputs:detail_normalmap_texture = @@ (
                                    colorSpace = "raw"
                                    customData = {
                                        asset default = @@
                                    }
                                    displayGroup = "Normal"
                                    displayName = "Detail Normal Map"
                                    hidden = false
                                    renderType = "texture_2d"
                                )
                                float inputs:detail_texture_rotate = 0 (
                                    customData = {
                                        float default = 0
                                    }
                                    displayGroup = "UV"
                                    displayName = "Detail Texture Rotate"
                                    doc = "Rotates angle of the detail texture in degrees."
                                    hidden = false
                                )
                                float2 inputs:detail_texture_scale = (1, 1) (
                                    customData = {
                                        float2 default = (1, 1)
                                    }
                                    displayGroup = "UV"
                                    displayName = "Detail Texture Tiling"
                                    doc = "Controls the repetition of the detail texture."
                                    hidden = false
                                )
                                float2 inputs:detail_texture_translate = (0, 0) (
                                    customData = {
                                        float2 default = (0, 0)
                                    }
                                    displayGroup = "UV"
                                    displayName = "Detail Texture Translate"
                                    doc = "Controls the position of the detail texture."
                                    hidden = false
                                )
                                color3f inputs:diffuse_color_constant = (0, 0.22784829, 1) (
                                    displayName = "Albedo Color"
                                    doc = "This is the albedo base color"
                                    hidden = false
                                    renderType = "color"
                                )
                                asset inputs:diffuse_texture = @@ (
                                    hidden = false
                                    renderType = "texture_2d"
                                )
                                color3f inputs:diffuse_tint = (1, 1, 1) (
                                    customData = {
                                        float3 default = (1, 1, 1)
                                    }
                                    displayGroup = "Albedo"
                                    displayName = "Color Tint"
                                    doc = "When enabled, this color value is multiplied over the final albedo color"
                                    hidden = false
                                    renderType = "color"
                                )
                                color3f inputs:emissive_color = (1, 0.1, 0.1) (
                                    customData = {
                                        float3 default = (1, 0.1, 0.1)
                                    }
                                    displayGroup = "Emissive"
                                    displayName = "Emissive Color"
                                    doc = "The emission color"
                                    hidden = false
                                    renderType = "color"
                                )
                                asset inputs:emissive_color_texture = @@ (
                                    colorSpace = "auto"
                                    customData = {
                                        asset default = @@
                                    }
                                    displayGroup = "Emissive"
                                    displayName = "Emissive Color map"
                                    doc = "The emissive color texture"
                                    hidden = false
                                    renderType = "texture_2d"
                                )
                                float inputs:emissive_intensity = 40 (
                                    customData = {
                                        float default = 40
                                    }
                                    displayGroup = "Emissive"
                                    displayName = "Emissive Intensity"
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                                asset inputs:emissive_mask_texture = @@ (
                                    colorSpace = "raw"
                                    customData = {
                                        asset default = @@
                                    }
                                    displayGroup = "Emissive"
                                    displayName = "Emissive Mask map"
                                    doc = "The texture masking the emissive color"
                                    hidden = false
                                    renderType = "texture_2d"
                                )
                                bool inputs:enable_emission = 0 (
                                    customData = {
                                        bool default = 0
                                    }
                                    displayGroup = "Emissive"
                                    displayName = "Enable Emission"
                                    doc = "Enables the emission of light from the material"
                                    hidden = false
                                )
                                bool inputs:enable_opacity = 0 (
                                    customData = {
                                        bool default = 0
                                    }
                                    displayGroup = "Opacity"
                                    displayName = "Enable Opacity"
                                    doc = "Enables the use of cutout opacity"
                                    hidden = false
                                )
                                bool inputs:enable_opacity_texture = 0 (
                                    customData = {
                                        bool default = 0
                                    }
                                    displayGroup = "Opacity"
                                    displayName = "Enable Opacity Texture"
                                    doc = "Enables or disables the usage of the opacity texture map"
                                    hidden = false
                                )
                                bool inputs:enable_ORM_texture = 0 (
                                    customData = {
                                        bool default = 0
                                    }
                                    displayGroup = "Reflectivity"
                                    displayName = "Enable ORM Texture"
                                    doc = "The ORM texture will be used to extract the Occlusion, Roughness and Metallic textures from R,G,B channels"
                                    hidden = false
                                )
                                bool inputs:flip_tangent_u = 0 (
                                    customData = {
                                        bool default = 0
                                    }
                                    displayGroup = "Normal"
                                    displayName = "Normal Map Flip U Tangent"
                                    hidden = false
                                )
                                bool inputs:flip_tangent_v = 1 (
                                    customData = {
                                        bool default = 1
                                    }
                                    displayGroup = "Normal"
                                    displayName = "Normal Map Flip V Tangent"
                                    hidden = false
                                )
                                float inputs:geometry_normal_roughness_strength = 1 (
                                    customData = {
                                        float default = 1
                                        dictionary range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "Normal"
                                    displayName = "Normal map to roughness weight"
                                    doc = "Enables and weights roughness induced by normal maps"
                                    hidden = false
                                )
                                float inputs:metallic_constant = 0 (
                                    customData = {
                                        float default = 0
                                        dictionary range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "Reflectivity"
                                    displayName = "Metallic Amount"
                                    doc = "Metallic Material"
                                    hidden = false
                                )
                                asset inputs:metallic_texture = @@ (
                                    colorSpace = "raw"
                                    customData = {
                                        asset default = @@
                                    }
                                    displayGroup = "Reflectivity"
                                    displayName = "Metallic Map"
                                    hidden = false
                                    renderType = "texture_2d"
                                )
                                float inputs:metallic_texture_influence = 0 (
                                    customData = {
                                        float default = 0
                                        dictionary range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "Reflectivity"
                                    displayName = "Metallic Map Influence"
                                    doc = "Blends between the constant value and the lookup of the metallic texture"
                                    hidden = false
                                )
                                asset inputs:normalmap_texture = @@ (
                                    colorSpace = "raw"
                                    customData = {
                                        asset default = @@
                                    }
                                    displayGroup = "Normal"
                                    displayName = "Normal Map"
                                    hidden = false
                                    renderType = "texture_2d"
                                )
                                float inputs:opacity_constant = 1 (
                                    customData = {
                                        float default = 1
                                        dictionary range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "Opacity"
                                    displayName = "Opacity Amount"
                                    doc = "Opacity value between 0 and 1, when Opacity Map is not valid"
                                    hidden = false
                                )
                                int inputs:opacity_mode = 1 (
                                    customData = {
                                        int default = 1
                                    }
                                    displayGroup = "Opacity"
                                    displayName = "Opacity Mono Source"
                                    doc = "Determines how to lookup opacity from the supplied texture. mono_alpha, mono_average, mono_luminance, mono_maximum"
                                    hidden = false
                                    renderType = "mono_mode"
                                    sdrMetadata = {
                                        string __SDR__enum_value = "mono_average"
                                        string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                                    }
                                )
                                asset inputs:opacity_texture = @@ (
                                    colorSpace = "raw"
                                    customData = {
                                        asset default = @@
                                    }
                                    displayGroup = "Opacity"
                                    displayName = "Opacity Map"
                                    hidden = false
                                    renderType = "texture_2d"
                                )
                                float inputs:opacity_threshold = 0 (
                                    customData = {
                                        float default = 0
                                        dictionary range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "Opacity"
                                    displayName = "Opacity Threshold"
                                    doc = "If 0, use fractional opacity values 'as is'; if > 0, remap opacity values to 1 when >= threshold and to 0 otherwise"
                                    hidden = false
                                )
                                asset inputs:ORM_texture = @@ (
                                    colorSpace = "raw"
                                    customData = {
                                        asset default = @@
                                    }
                                    displayGroup = "Reflectivity"
                                    displayName = "ORM Map"
                                    doc = "Texture that has Occlusion, Roughness and Metallic maps stored in their respective R, G and B channels"
                                    hidden = false
                                    renderType = "texture_2d"
                                )
                                bool inputs:project_uvw = 0 (
                                    customData = {
                                        bool default = 0
                                    }
                                    displayGroup = "UV"
                                    displayName = "Enable Project UVW Coordinates"
                                    doc = "When enabled, UV coordinates will be generated by projecting them from a coordinate system"
                                    hidden = false
                                )
                                float inputs:reflection_roughness_constant = 0.5 (
                                    customData = {
                                        float default = 0.5
                                        dictionary range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "Reflectivity"
                                    displayName = "Roughness Amount"
                                    doc = "Higher roughness values lead to more blurry reflections"
                                    hidden = false
                                )
                                float inputs:reflection_roughness_texture_influence = 0 (
                                    customData = {
                                        float default = 0
                                        dictionary range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "Reflectivity"
                                    displayName = "Roughness Map Influence"
                                    doc = "Blends between the constant value and the lookup of the roughness texture"
                                    hidden = false
                                )
                                asset inputs:reflectionroughness_texture = @@ (
                                    colorSpace = "raw"
                                    customData = {
                                        asset default = @@
                                    }
                                    displayGroup = "Reflectivity"
                                    displayName = "Roughness Map"
                                    hidden = false
                                    renderType = "texture_2d"
                                )
                                float inputs:specular_level = 0.5 (
                                    customData = {
                                        float default = 0.5
                                        dictionary soft_range = {
                                            float max = 1
                                            float min = 0
                                        }
                                    }
                                    displayGroup = "Reflectivity"
                                    displayName = "Specular"
                                    doc = "The specular level (intensity) of the material"
                                    hidden = false
                                )
                                float inputs:texture_rotate = 0 (
                                    customData = {
                                        float default = 0
                                    }
                                    displayGroup = "UV"
                                    displayName = "Texture Rotate"
                                    doc = "Rotates angle of texture in degrees."
                                    hidden = false
                                )
                                float2 inputs:texture_scale = (1, 1) (
                                    customData = {
                                        float2 default = (1, 1)
                                    }
                                    displayGroup = "UV"
                                    displayName = "Texture Tiling"
                                    doc = "Controls the repetition of the texture."
                                    hidden = false
                                )
                                float2 inputs:texture_translate = (0, 0) (
                                    customData = {
                                        float2 default = (0, 0)
                                    }
                                    displayGroup = "UV"
                                    displayName = "Texture Translate"
                                    doc = "Controls position of texture."
                                    hidden = false
                                )
                                int inputs:uv_space_index = 0 (
                                    customData = {
                                        int default = 0
                                        dictionary range = {
                                            int max = 3
                                            int min = 0
                                        }
                                    }
                                    displayGroup = "UV"
                                    displayName = "UV Space Index"
                                    doc = "UV Space Index."
                                    hidden = false
                                )
                                bool inputs:world_or_object = 0 (
                                    customData = {
                                        bool default = 0
                                    }
                                    displayGroup = "UV"
                                    displayName = "Enable World Space"
                                    doc = "When enabled, uses world space for projection, otherwise object space is used"
                                    hidden = false
                                )
                                token outputs:out (
                                    renderType = "material"
                                )
                            }
                        }
                    }

                    over "FOF_Mesh_Label_1"
                    {
                        token visibility = "inherited"
                    }

                    over "FOF_Mesh_Label_6_Small"
                    {
                        token visibility = "invisible"
                    }

                    over "FOF_Mesh_Magenta_Box" (
                        prepend apiSchemas = ["PhysxTriangleMeshSimplificationCollisionAPI"]
                    )
                    {
                        uniform token physics:approximation = "meshSimplification"
                    }
                }
            }
        }

        def "Franka" (
            prepend payload = @http://omniverse-content-production.s3-us-west-2.amazonaws.com/Assets/Isaac/2023.1.1/Isaac/Robots/Franka/franka.usd@
        )
        {
            quatd xformOp:orient = (-1.6081226229577292e-16, 0, 0, 1)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-0.49000000953674316, 0, 0.800000011920929)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            over "panda_link0"
            {
            }

            over "panda_link1"
            {
            }

            over "panda_link2"
            {
            }

            over "panda_link3"
            {
            }

            over "panda_link4"
            {
            }

            over "panda_link5"
            {
            }

            over "panda_link6"
            {
            }

            over "panda_link7"
            {
            }

            over "panda_link8"
            {
            }

            over "panda_hand"
            {
            }

            over "panda_leftfinger"
            {
            }

            over "panda_rightfinger"
            {
            }
        }

        def "table" (
            prepend payload = @./table/table.usd@
        )
        {
            quatf xformOp:orient = (0.70710677, 0, 0, 0.70710677)
            float3 xformOp:scale = (0.8859541, 1, 1)
            double3 xformOp:scale:unitsResolve = (0.01, 0.01, 0.01)
            double3 xformOp:translate = (-4.76837158203125e-7, -4.76837158203125e-7, 8.881784197001252e-16)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale", "xformOp:scale:unitsResolve"]

            over "mesh"
            {
                over "collision"
                {
                    over "top" (
                        prepend apiSchemas = ["PhysxCookedDataAPI:triangleMesh"]
                    )
                    {
                        uchar[] physxCookedData:triangleMesh:buffer = [7, 121, 208, 107, 22, 30, 224, 166, 4, 83, 186, 229, 43, 20, 125, 112, 206, 78, 88, 83, 1, 77, 69, 83, 72, 16, 0, 0, 0, 1, 0, 0, 0, 182, 1, 0, 0, 8, 0, 0, 0, 12, 0, 0, 0, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 72, 194, 0, 0, 72, 66, 0, 0, 72, 194, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 72, 66, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 72, 66, 0, 0, 72, 194, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 72, 194, 5, 7, 3, 5, 3, 1, 4, 6, 7, 4, 7, 5, 6, 2, 3, 6, 3, 7, 4, 5, 1, 4, 1, 0, 4, 0, 2, 4, 2, 6, 0, 1, 3, 0, 3, 2, 11, 0, 0, 0, 10, 11, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 3, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 6, 0, 0, 0, 9, 0, 0, 0, 5, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 9, 0, 0, 0, 11, 0, 0, 0, 5, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 7, 0, 0, 0, 6, 0, 0, 0, 10, 0, 0, 0, 8, 0, 0, 0, 7, 0, 0, 0, 11, 0, 0, 0, 9, 0, 0, 0, 8, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 7, 0, 0, 0, 1, 0, 0, 0, 11, 0, 0, 0, 10, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 66, 86, 52, 32, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 52, 173, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 55, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 72, 66, 12, 0, 0, 0, 24, 48, 24, 48, 24, 48, 24, 48, 24, 48, 24, 48, 4, 7, 5, 4, 6, 7, 5, 7, 3, 5, 3, 1, 6, 2, 3, 6, 3, 7, 4, 5, 1, 4, 1, 0, 4, 0, 2, 4, 2, 6, 0, 1, 3, 0, 3, 2, 1, 0, 0, 128, 2, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 3, 0, 0, 128, 0, 0, 0, 0, 2, 0, 0, 128, 10, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 11, 0, 0, 0, 5, 0, 0, 128, 0, 0, 0, 0, 4, 0, 0, 128, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 7, 0, 0, 128, 0, 0, 0, 0, 6, 0, 0, 128, 10, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 11, 0, 0, 0, 9, 0, 0, 128, 0, 0, 0, 0, 8, 0, 0, 128, 4, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 3, 0, 0, 0, 11, 0, 0, 128, 0, 0, 0, 0, 10, 0, 0, 128, 4, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 66, 86, 51, 50, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 52, 173, 66, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 0, 0, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 12, 0, 0, 0, 18, 0, 0, 0, 24, 0, 0, 0, 28, 0, 0, 0, 32, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 3, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 10, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 11, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 6, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 5, 0, 0, 0]
                    }

                    over "side_right" (
                        prepend apiSchemas = ["PhysxCookedDataAPI:triangleMesh"]
                    )
                    {
                        uchar[] physxCookedData:triangleMesh:buffer = [7, 121, 208, 107, 22, 30, 224, 166, 4, 83, 186, 229, 43, 20, 125, 112, 206, 78, 88, 83, 1, 77, 69, 83, 72, 16, 0, 0, 0, 1, 0, 0, 0, 182, 1, 0, 0, 8, 0, 0, 0, 12, 0, 0, 0, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 72, 194, 0, 0, 72, 66, 0, 0, 72, 194, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 72, 66, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 72, 66, 0, 0, 72, 194, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 72, 194, 5, 7, 3, 5, 3, 1, 4, 6, 7, 4, 7, 5, 6, 2, 3, 6, 3, 7, 4, 5, 1, 4, 1, 0, 4, 0, 2, 4, 2, 6, 0, 1, 3, 0, 3, 2, 11, 0, 0, 0, 10, 11, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 3, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 6, 0, 0, 0, 9, 0, 0, 0, 5, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 9, 0, 0, 0, 11, 0, 0, 0, 5, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 7, 0, 0, 0, 6, 0, 0, 0, 10, 0, 0, 0, 8, 0, 0, 0, 7, 0, 0, 0, 11, 0, 0, 0, 9, 0, 0, 0, 8, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 7, 0, 0, 0, 1, 0, 0, 0, 11, 0, 0, 0, 10, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 66, 86, 52, 32, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 52, 173, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 55, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 72, 66, 12, 0, 0, 0, 24, 48, 24, 48, 24, 48, 24, 48, 24, 48, 24, 48, 4, 7, 5, 4, 6, 7, 5, 7, 3, 5, 3, 1, 6, 2, 3, 6, 3, 7, 4, 5, 1, 4, 1, 0, 4, 0, 2, 4, 2, 6, 0, 1, 3, 0, 3, 2, 1, 0, 0, 128, 2, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 3, 0, 0, 128, 0, 0, 0, 0, 2, 0, 0, 128, 10, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 11, 0, 0, 0, 5, 0, 0, 128, 0, 0, 0, 0, 4, 0, 0, 128, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 7, 0, 0, 128, 0, 0, 0, 0, 6, 0, 0, 128, 10, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 11, 0, 0, 0, 9, 0, 0, 128, 0, 0, 0, 0, 8, 0, 0, 128, 4, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 3, 0, 0, 0, 11, 0, 0, 128, 0, 0, 0, 0, 10, 0, 0, 128, 4, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 66, 86, 51, 50, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 52, 173, 66, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 0, 0, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 12, 0, 0, 0, 18, 0, 0, 0, 24, 0, 0, 0, 28, 0, 0, 0, 32, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 3, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 10, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 11, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 6, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 5, 0, 0, 0]
                    }

                    over "side_left" (
                        prepend apiSchemas = ["PhysxCookedDataAPI:triangleMesh"]
                    )
                    {
                        uchar[] physxCookedData:triangleMesh:buffer = [7, 121, 208, 107, 22, 30, 224, 166, 4, 83, 186, 229, 43, 20, 125, 112, 206, 78, 88, 83, 1, 77, 69, 83, 72, 16, 0, 0, 0, 1, 0, 0, 0, 182, 1, 0, 0, 8, 0, 0, 0, 12, 0, 0, 0, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 72, 194, 0, 0, 72, 66, 0, 0, 72, 194, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 72, 66, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 72, 66, 0, 0, 72, 194, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 72, 194, 5, 7, 3, 5, 3, 1, 4, 6, 7, 4, 7, 5, 6, 2, 3, 6, 3, 7, 4, 5, 1, 4, 1, 0, 4, 0, 2, 4, 2, 6, 0, 1, 3, 0, 3, 2, 11, 0, 0, 0, 10, 11, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 3, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 6, 0, 0, 0, 9, 0, 0, 0, 5, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 9, 0, 0, 0, 11, 0, 0, 0, 5, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 7, 0, 0, 0, 6, 0, 0, 0, 10, 0, 0, 0, 8, 0, 0, 0, 7, 0, 0, 0, 11, 0, 0, 0, 9, 0, 0, 0, 8, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 7, 0, 0, 0, 1, 0, 0, 0, 11, 0, 0, 0, 10, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 66, 86, 52, 32, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 52, 173, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 55, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 72, 66, 12, 0, 0, 0, 24, 48, 24, 48, 24, 48, 24, 48, 24, 48, 24, 48, 4, 7, 5, 4, 6, 7, 5, 7, 3, 5, 3, 1, 6, 2, 3, 6, 3, 7, 4, 5, 1, 4, 1, 0, 4, 0, 2, 4, 2, 6, 0, 1, 3, 0, 3, 2, 1, 0, 0, 128, 2, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 3, 0, 0, 128, 0, 0, 0, 0, 2, 0, 0, 128, 10, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 11, 0, 0, 0, 5, 0, 0, 128, 0, 0, 0, 0, 4, 0, 0, 128, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 7, 0, 0, 128, 0, 0, 0, 0, 6, 0, 0, 128, 10, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 11, 0, 0, 0, 9, 0, 0, 128, 0, 0, 0, 0, 8, 0, 0, 128, 4, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 3, 0, 0, 0, 11, 0, 0, 128, 0, 0, 0, 0, 10, 0, 0, 128, 4, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 66, 86, 51, 50, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 52, 173, 66, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 0, 0, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 12, 0, 0, 0, 18, 0, 0, 0, 24, 0, 0, 0, 28, 0, 0, 0, 32, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 3, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 10, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 11, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 6, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 5, 0, 0, 0]
                    }
                }

                over "visual"
                {
                    float3 xformOp:rotateXYZ = (0, 0, 0)
                    float3 xformOp:scale = (0.8011636, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:translate:pivot", "xformOp:rotateXYZ", "xformOp:scale", "!invert!xformOp:translate:pivot"]
                }
            }
        }
    }

    def Xform "Conveyor" (
        kind = "group"
    )
    {
        float3 xformOp:rotateXYZ = (0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-0.026662548866354496, 0, -0.008692426343300808)
        float3 xformOp:translate:pivot = (2.220446e-16, 0, 1.1554745)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:translate:pivot", "xformOp:rotateXYZ", "xformOp:scale", "!invert!xformOp:translate:pivot"]

        def Xform "Track" (
            kind = "group"
        )
        {
            float3 xformOp:rotateXYZ = (0, 0, 0)
            float3 xformOp:scale = (1, 1, 0.4)
            double3 xformOp:translate = (-1.992404118245191, 0, -0.6821242039843839)
            float3 xformOp:translate:pivot = (2.220446e-16, 0, 1.1554745)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:translate:pivot", "xformOp:rotateXYZ", "xformOp:scale", "!invert!xformOp:translate:pivot"]

            def Xform "ConveyorTrackA" (
                prepend references = @http://omniverse-content-production.s3-us-west-2.amazonaws.com/Assets/Isaac/2022.2.1/Isaac/Props/Conveyors/ConveyorBelt_A06.usd@
            )
            {
                quatd xformOp:orient = (6.123233995736766e-17, 0, 0, 1)
                double3 xformOp:scale = (0.7, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                def OmniGraph "ConveyorBeltGraph"
                {
                    token evaluationMode = "Automatic"
                    token evaluator:type = "execution"
                    token fabricCacheBacking = "Shared"
                    int2 fileFormatVersion = (1, 9)
                    token pipelineStage = "pipelineStageSimulation"

                    def OmniGraphNode "OnTick"
                    {
                        token node:type = "omni.graph.action.OnPlaybackTick"
                        int node:typeVersion = 2
                        custom double outputs:deltaSeconds
                        custom double outputs:frame
                        custom uint outputs:tick (
                            customData = {
                                bool isExecution = 1
                            }
                        )
                        custom double outputs:time
                    }

                    def OmniGraphNode "ConveyorNode"
                    {
                        custom float2 inputs:animateDirection = (1, 0)
                        custom float inputs:animateScale = 0.5
                        custom bool inputs:animateTexture
                        custom rel inputs:conveyorPrim = </Main/Conveyor/Track/ConveyorTrackA/Belt> (
                            customData = {
                                dictionary omni = {
                                    dictionary graph = {
                                        string relType = "target"
                                    }
                                }
                            }
                        )
                        custom bool inputs:curved = 0
                        custom float inputs:delta
                        prepend float inputs:delta.connect = </Main/Conveyor/Track/ConveyorTrackA/ConveyorBeltGraph/OnTick.outputs:deltaSeconds>
                        custom float3 inputs:direction = (1, 0, 0)
                        custom bool inputs:enabled
                        custom uint inputs:onStep
                        prepend uint inputs:onStep.connect = </Main/Conveyor/Track/ConveyorTrackA/ConveyorBeltGraph/OnTick.outputs:tick>
                        custom float inputs:velocity
                        token node:type = "omni.isaac.conveyor.IsaacConveyor"
                        int node:typeVersion = 1
                    }
                }
            }

            def Xform "ConveyorTrackB" (
                prepend references = @http://omniverse-content-production.s3-us-west-2.amazonaws.com/Assets/Isaac/2022.2.1/Isaac/Props/Conveyors/ConveyorBelt_A06.usd@
            )
            {
                quatd xformOp:orient = (1, 0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                def OmniGraph "ConveyorBeltGraph"
                {
                    token evaluationMode = "Automatic"
                    token evaluator:type = "execution"
                    token fabricCacheBacking = "Shared"
                    int2 fileFormatVersion = (1, 9)
                    token pipelineStage = "pipelineStageSimulation"

                    def OmniGraphNode "OnTick"
                    {
                        token node:type = "omni.graph.action.OnPlaybackTick"
                        int node:typeVersion = 2
                        custom double outputs:deltaSeconds
                        custom double outputs:frame
                        custom uint outputs:tick (
                            customData = {
                                bool isExecution = 1
                            }
                        )
                        custom double outputs:time
                    }

                    def OmniGraphNode "ConveyorNode"
                    {
                        custom float2 inputs:animateDirection = (1, 0)
                        custom float inputs:animateScale = 0.5
                        custom bool inputs:animateTexture
                        custom rel inputs:conveyorPrim = </Main/Conveyor/Track/ConveyorTrackB/Belt> (
                            customData = {
                                dictionary omni = {
                                    dictionary graph = {
                                        string relType = "target"
                                    }
                                }
                            }
                        )
                        custom bool inputs:curved = 0
                        custom float inputs:delta
                        prepend float inputs:delta.connect = </Main/Conveyor/Track/ConveyorTrackB/ConveyorBeltGraph/OnTick.outputs:deltaSeconds>
                        custom float3 inputs:direction = (-1, 0, 0)
                        custom bool inputs:enabled
                        custom uint inputs:onStep
                        prepend uint inputs:onStep.connect = </Main/Conveyor/Track/ConveyorTrackB/ConveyorBeltGraph/OnTick.outputs:tick>
                        custom float inputs:velocity
                        token node:type = "omni.isaac.conveyor.IsaacConveyor"
                        int node:typeVersion = 1
                    }
                }

                over "Belt"
                {
                    quatd xformOp:orient = (1, 0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0.9997167968750001, -0.00003170859375018146, 1.7610116577148438)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }
            }
        }

        def Xform "Sensors" (
            kind = "group"
        )
        {
            float3 xformOp:rotateXYZ = (0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-1.1, 0, 0.7393078417631291)
            float3 xformOp:translate:pivot = (0, 0, 0.58)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:translate:pivot", "xformOp:rotateXYZ", "xformOp:scale", "!invert!xformOp:translate:pivot"]

            def Mesh "emitter" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
                int[] faceVertexIndices = [0, 1, 3, 2, 4, 6, 7, 5, 6, 2, 3, 7, 4, 5, 1, 0, 4, 0, 2, 6, 5, 7, 3, 1]
                rel material:binding = </Main/Conveyor/Sensors/materials/Looks/Silver> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0)] (
                    interpolation = "faceVarying"
                )
                point3f[] points = [(-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5), (-0.5, -0.5, -0.5), (0.5, -0.5, -0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5)]
                texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1), (1, 0), (1, 1), (0, 1), (0, 0), (0, 1), (0, 0), (1, 0), (1, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (1, 0), (1, 1), (0, 1), (0, 0)] (
                    interpolation = "faceVarying"
                )
                uniform token subdivisionScheme = "none"
                quatd xformOp:orient = (1, 0, 0, 0)
                double3 xformOp:scale = (0.07, 0.04, 0.04)
                double3 xformOp:translate = (0, 0.476, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            def Mesh "receiver" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
                int[] faceVertexIndices = [0, 1, 3, 2, 4, 6, 7, 5, 6, 2, 3, 7, 4, 5, 1, 0, 4, 0, 2, 6, 5, 7, 3, 1]
                rel material:binding = </Main/Conveyor/Sensors/materials/Looks/Silver> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0)] (
                    interpolation = "faceVarying"
                )
                point3f[] points = [(-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5), (-0.5, -0.5, -0.5), (0.5, -0.5, -0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5)]
                texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1), (1, 0), (1, 1), (0, 1), (0, 0), (0, 1), (0, 0), (1, 0), (1, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (1, 0), (1, 1), (0, 1), (0, 0)] (
                    interpolation = "faceVarying"
                )
                uniform token subdivisionScheme = "none"
                quatd xformOp:orient = (1, 0, 0, 0)
                double3 xformOp:scale = (0.07, 0.04, 0.04)
                double3 xformOp:translate = (0, -0.476, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            def "materials" (
                prepend payload = @http://omniverse-content-production.s3-us-west-2.amazonaws.com/Assets/Isaac/2023.1.1/Isaac/Sensors/LeopardImaging/Owl/materials/materials.usd@
            )
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-1, 0.476, 0.58)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }
        }
    }

    def OmniGraph "Moveit2Graph"
    {
        token evaluationMode = "Automatic"
        token evaluator:type = "execution"
        token fabricCacheBacking = "Shared"
        int2 fileFormatVersion = (1, 9)
        token pipelineStage = "pipelineStageSimulation"

        def OmniGraphNode "ros2_publish_joint_state" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom uint64 inputs:context
            prepend uint64 inputs:context.connect = </Main/Moveit2Graph/ros2_context.outputs:context>
            custom uint inputs:execIn
            prepend uint inputs:execIn.connect = </Main/Moveit2Graph/on_playback_tick.outputs:tick>
            custom string inputs:nodeNamespace
            custom string inputs:qosProfile
            custom uint64 inputs:queueSize
            custom rel inputs:targetPrim = </Main/PickingUnit/Franka> (
                customData = {
                    dictionary omni = {
                        dictionary graph = {
                            string relType = "target"
                        }
                    }
                }
            )
            custom double inputs:timeStamp
            prepend double inputs:timeStamp.connect = </Main/Moveit2Graph/isaac_read_simulation_time.outputs:simulationTime>
            custom string inputs:topicName = "isaac_joint_states"
            token node:type = "omni.isaac.ros2_bridge.ROS2PublishJointState"
            int node:typeVersion = 1
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (926, 321.8108)
        }

        def OmniGraphNode "ros2_subscribe_joint_state" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom uint64 inputs:context
            prepend uint64 inputs:context.connect = </Main/Moveit2Graph/ros2_context.outputs:context>
            custom uint inputs:execIn
            prepend uint inputs:execIn.connect = </Main/Moveit2Graph/on_playback_tick.outputs:tick>
            custom string inputs:nodeNamespace
            custom string inputs:qosProfile
            custom uint64 inputs:queueSize
            custom string inputs:topicName = "isaac_joint_commands"
            token node:type = "omni.isaac.ros2_bridge.ROS2SubscribeJointState"
            int node:typeVersion = 2
            custom double[] outputs:effortCommand
            custom uint outputs:execOut (
                customData = {
                    bool isExecution = 1
                }
            )
            custom token[] outputs:jointNames
            custom double[] outputs:positionCommand
            custom double outputs:timeStamp
            custom double[] outputs:velocityCommand
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (522.063, 714.6343)
        }

        def OmniGraphNode "ros2_context" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom uchar inputs:domain_id
            custom bool inputs:useDomainIDEnvVar = 1
            token node:type = "omni.isaac.ros2_bridge.ROS2Context"
            int node:typeVersion = 2
            custom uint64 outputs:context
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (136.08057, 571.7583)
        }

        def OmniGraphNode "ros2_publish_clock" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom uint64 inputs:context
            prepend uint64 inputs:context.connect = </Main/Moveit2Graph/ros2_context.outputs:context>
            custom uint inputs:execIn
            prepend uint inputs:execIn.connect = </Main/Moveit2Graph/on_playback_tick.outputs:tick>
            custom string inputs:nodeNamespace
            custom string inputs:qosProfile
            custom uint64 inputs:queueSize
            custom double inputs:timeStamp
            prepend double inputs:timeStamp.connect = </Main/Moveit2Graph/isaac_read_simulation_time.outputs:simulationTime>
            custom string inputs:topicName
            token node:type = "omni.isaac.ros2_bridge.ROS2PublishClock"
            int node:typeVersion = 1
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (925, 92)
        }

        def OmniGraphNode "isaac_read_simulation_time" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom bool inputs:resetOnStop
            custom int64 inputs:swhFrameNumber
            token node:type = "omni.isaac.core_nodes.IsaacReadSimulationTime"
            int node:typeVersion = 1
            custom double outputs:simulationTime
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (125.56644, 92.16188)
        }

        def OmniGraphNode "articulation_controller" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom double[] inputs:effortCommand
            prepend double[] inputs:effortCommand.connect = </Main/Moveit2Graph/ros2_subscribe_joint_state.outputs:effortCommand>
            custom uint inputs:execIn
            prepend uint inputs:execIn.connect = </Main/Moveit2Graph/on_playback_tick.outputs:tick>
            custom int[] inputs:jointIndices
            custom token[] inputs:jointNames
            prepend token[] inputs:jointNames.connect = </Main/Moveit2Graph/ros2_subscribe_joint_state.outputs:jointNames>
            custom double[] inputs:positionCommand
            prepend double[] inputs:positionCommand.connect = </Main/Moveit2Graph/ros2_subscribe_joint_state.outputs:positionCommand>
            custom string inputs:robotPath = "/Main/PickingUnit/Franka"
            custom rel inputs:targetPrim (
                customData = {
                    dictionary omni = {
                        dictionary graph = {
                            string relType = "target"
                        }
                    }
                }
            )
            custom bool inputs:usePath
            custom double[] inputs:velocityCommand
            prepend double[] inputs:velocityCommand.connect = </Main/Moveit2Graph/ros2_subscribe_joint_state.outputs:velocityCommand>
            token node:type = "omni.isaac.core_nodes.IsaacArticulationController"
            int node:typeVersion = 1
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (933.017, 613.9863)
        }

        def OmniGraphNode "on_playback_tick" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            token node:type = "omni.graph.action.OnPlaybackTick"
            int node:typeVersion = 2
            custom double outputs:deltaSeconds
            custom double outputs:frame
            custom uint outputs:tick (
                customData = {
                    bool isExecution = 1
                }
            )
            custom double outputs:time
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (146.72263, 343.76093)
        }
    }

    def "basket_bottom" (
        prepend payload = @http://omniverse-content-production.s3-us-west-2.amazonaws.com/Assets/Isaac/4.1/Isaac/Props/KLT_Bin/small_KLT_visual_collision.usd@
    )
    {
        float3 xformOp:rotateXYZ = (0, 0, 0)
        float3 xformOp:scale = (4, 2.6, 3.3)
        double3 xformOp:translate = (0.2, 0, 0.24608624980485147)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

        over "Visuals"
        {
            over "Looks"
            {
                over "FOF_Mesh_LabelsSG"
                {
                    custom uniform bool paused = 0 (
                        customData = {
                            bool nonpersistant = 1
                        }
                        hidden = true
                    )

                    over "Shader"
                    {
                        reorder properties = ["inputs:diffuse_color_constant", "inputs:diffuse_texture", "inputs:albedo_desaturation", "inputs:albedo_add", "inputs:albedo_brightness", "inputs:diffuse_tint", "inputs:reflection_roughness_constant", "inputs:reflection_roughness_texture_influence", "inputs:reflectionroughness_texture", "inputs:metallic_constant", "inputs:metallic_texture_influence", "inputs:metallic_texture", "inputs:specular_level", "inputs:enable_ORM_texture", "inputs:ORM_texture", "inputs:ao_to_diffuse", "inputs:ao_texture", "inputs:enable_emission", "inputs:emissive_color", "inputs:emissive_color_texture", "inputs:emissive_mask_texture", "inputs:emissive_intensity", "inputs:enable_opacity", "inputs:opacity_texture", "inputs:opacity_constant", "inputs:enable_opacity_texture", "inputs:opacity_mode", "inputs:opacity_threshold", "inputs:geometry_normal_roughness_strength", "inputs:bump_factor", "inputs:normalmap_texture", "inputs:detail_bump_factor", "inputs:detail_normalmap_texture", "inputs:flip_tangent_u", "inputs:flip_tangent_v", "inputs:project_uvw", "inputs:world_or_object", "inputs:uv_space_index", "inputs:texture_translate", "inputs:texture_rotate", "inputs:texture_scale", "inputs:detail_texture_translate", "inputs:detail_texture_rotate", "inputs:detail_texture_scale"]
                        float inputs:albedo_add = 0 (
                            customData = {
                                float default = 0
                                dictionary soft_range = {
                                    float max = 1
                                    float min = -1
                                }
                            }
                            displayGroup = "Albedo"
                            displayName = "Albedo Add"
                            doc = "Adds a constant value to the diffuse color "
                            hidden = false
                        )
                        float inputs:albedo_brightness = 1 (
                            customData = {
                                float default = 1
                                dictionary soft_range = {
                                    float max = 1
                                    float min = 0
                                }
                            }
                            displayGroup = "Albedo"
                            displayName = "Albedo Brightness"
                            doc = "Multiplier for the diffuse color "
                            hidden = false
                        )
                        float inputs:albedo_desaturation = 0 (
                            customData = {
                                float default = 0
                                dictionary soft_range = {
                                    float max = 1
                                    float min = 0
                                }
                            }
                            displayGroup = "Albedo"
                            displayName = "Albedo Desaturation"
                            doc = "Desaturates the diffuse color"
                            hidden = false
                        )
                        asset inputs:ao_texture = @@ (
                            colorSpace = "raw"
                            customData = {
                                asset default = @@
                            }
                            displayGroup = "AO"
                            displayName = "Ambient Occlusion Map"
                            doc = "The ambient occlusion texture for the material"
                            hidden = false
                            renderType = "texture_2d"
                        )
                        float inputs:ao_to_diffuse = 0 (
                            customData = {
                                float default = 0
                                dictionary range = {
                                    float max = 1
                                    float min = 0
                                }
                            }
                            displayGroup = "AO"
                            displayName = "AO to diffuse"
                            doc = "Controls the amount of ambient occlusion multiplied against the diffuse color channel"
                            hidden = false
                        )
                        float inputs:bump_factor = 1 (
                            customData = {
                                float default = 1
                                dictionary soft_range = {
                                    float max = 1
                                    float min = 0
                                }
                            }
                            displayGroup = "Normal"
                            displayName = "Normal Strength"
                            doc = "Strength of normal map"
                            hidden = false
                        )
                        float inputs:detail_bump_factor = 0.3 (
                            customData = {
                                float default = 0.3
                                dictionary soft_range = {
                                    float max = 1
                                    float min = 0
                                }
                            }
                            displayGroup = "Normal"
                            displayName = "Detail Normal Strength"
                            doc = "Strength of the detail normal"
                            hidden = false
                        )
                        asset inputs:detail_normalmap_texture = @@ (
                            colorSpace = "raw"
                            customData = {
                                asset default = @@
                            }
                            displayGroup = "Normal"
                            displayName = "Detail Normal Map"
                            hidden = false
                            renderType = "texture_2d"
                        )
                        float inputs:detail_texture_rotate = 0 (
                            customData = {
                                float default = 0
                            }
                            displayGroup = "UV"
                            displayName = "Detail Texture Rotate"
                            doc = "Rotates angle of the detail texture in degrees."
                            hidden = false
                        )
                        float2 inputs:detail_texture_scale = (1, 1) (
                            customData = {
                                float2 default = (1, 1)
                            }
                            displayGroup = "UV"
                            displayName = "Detail Texture Tiling"
                            doc = "Controls the repetition of the detail texture."
                            hidden = false
                        )
                        float2 inputs:detail_texture_translate = (0, 0) (
                            customData = {
                                float2 default = (0, 0)
                            }
                            displayGroup = "UV"
                            displayName = "Detail Texture Translate"
                            doc = "Controls the position of the detail texture."
                            hidden = false
                        )
                        color3f inputs:diffuse_color_constant (
                            displayName = "Albedo Color"
                            doc = "This is the albedo base color"
                            hidden = false
                            renderType = "color"
                        )
                        asset inputs:diffuse_texture (
                            colorSpace = "auto"
                            hidden = false
                            renderType = "texture_2d"
                        )
                        color3f inputs:diffuse_tint = (1, 1, 1) (
                            customData = {
                                float3 default = (1, 1, 1)
                            }
                            displayGroup = "Albedo"
                            displayName = "Color Tint"
                            doc = "When enabled, this color value is multiplied over the final albedo color"
                            hidden = false
                            renderType = "color"
                        )
                        color3f inputs:emissive_color = (1, 0.1, 0.1) (
                            customData = {
                                float3 default = (1, 0.1, 0.1)
                            }
                            displayGroup = "Emissive"
                            displayName = "Emissive Color"
                            doc = "The emission color"
                            hidden = false
                            renderType = "color"
                        )
                        asset inputs:emissive_color_texture = @@ (
                            colorSpace = "auto"
                            customData = {
                                asset default = @@
                            }
                            displayGroup = "Emissive"
                            displayName = "Emissive Color map"
                            doc = "The emissive color texture"
                            hidden = false
                            renderType = "texture_2d"
                        )
                        float inputs:emissive_intensity = 40 (
                            customData = {
                                float default = 40
                            }
                            displayGroup = "Emissive"
                            displayName = "Emissive Intensity"
                            doc = "Intensity of the emission"
                            hidden = false
                        )
                        asset inputs:emissive_mask_texture = @@ (
                            colorSpace = "raw"
                            customData = {
                                asset default = @@
                            }
                            displayGroup = "Emissive"
                            displayName = "Emissive Mask map"
                            doc = "The texture masking the emissive color"
                            hidden = false
                            renderType = "texture_2d"
                        )
                        bool inputs:enable_emission = 0 (
                            customData = {
                                bool default = 0
                            }
                            displayGroup = "Emissive"
                            displayName = "Enable Emission"
                            doc = "Enables the emission of light from the material"
                            hidden = false
                        )
                        bool inputs:enable_opacity = 0 (
                            customData = {
                                bool default = 0
                            }
                            displayGroup = "Opacity"
                            displayName = "Enable Opacity"
                            doc = "Enables the use of cutout opacity"
                            hidden = false
                        )
                        bool inputs:enable_opacity_texture = 0 (
                            customData = {
                                bool default = 0
                            }
                            displayGroup = "Opacity"
                            displayName = "Enable Opacity Texture"
                            doc = "Enables or disables the usage of the opacity texture map"
                            hidden = false
                        )
                        bool inputs:enable_ORM_texture = 0 (
                            customData = {
                                bool default = 0
                            }
                            displayGroup = "Reflectivity"
                            displayName = "Enable ORM Texture"
                            doc = "The ORM texture will be used to extract the Occlusion, Roughness and Metallic textures from R,G,B channels"
                            hidden = false
                        )
                        bool inputs:flip_tangent_u = 0 (
                            customData = {
                                bool default = 0
                            }
                            displayGroup = "Normal"
                            displayName = "Normal Map Flip U Tangent"
                            hidden = false
                        )
                        bool inputs:flip_tangent_v = 1 (
                            customData = {
                                bool default = 1
                            }
                            displayGroup = "Normal"
                            displayName = "Normal Map Flip V Tangent"
                            hidden = false
                        )
                        float inputs:geometry_normal_roughness_strength = 1 (
                            customData = {
                                float default = 1
                                dictionary range = {
                                    float max = 1
                                    float min = 0
                                }
                            }
                            displayGroup = "Normal"
                            displayName = "Normal map to roughness weight"
                            doc = "Enables and weights roughness induced by normal maps"
                            hidden = false
                        )
                        float inputs:metallic_constant = 0 (
                            customData = {
                                float default = 0
                                dictionary range = {
                                    float max = 1
                                    float min = 0
                                }
                            }
                            displayGroup = "Reflectivity"
                            displayName = "Metallic Amount"
                            doc = "Metallic Material"
                            hidden = false
                        )
                        asset inputs:metallic_texture = @@ (
                            colorSpace = "raw"
                            customData = {
                                asset default = @@
                            }
                            displayGroup = "Reflectivity"
                            displayName = "Metallic Map"
                            hidden = false
                            renderType = "texture_2d"
                        )
                        float inputs:metallic_texture_influence = 0 (
                            customData = {
                                float default = 0
                                dictionary range = {
                                    float max = 1
                                    float min = 0
                                }
                            }
                            displayGroup = "Reflectivity"
                            displayName = "Metallic Map Influence"
                            doc = "Blends between the constant value and the lookup of the metallic texture"
                            hidden = false
                        )
                        asset inputs:normalmap_texture = @@ (
                            colorSpace = "raw"
                            customData = {
                                asset default = @@
                            }
                            displayGroup = "Normal"
                            displayName = "Normal Map"
                            hidden = false
                            renderType = "texture_2d"
                        )
                        float inputs:opacity_constant = 1 (
                            customData = {
                                float default = 1
                                dictionary range = {
                                    float max = 1
                                    float min = 0
                                }
                            }
                            displayGroup = "Opacity"
                            displayName = "Opacity Amount"
                            doc = "Opacity value between 0 and 1, when Opacity Map is not valid"
                            hidden = false
                        )
                        int inputs:opacity_mode = 1 (
                            customData = {
                                int default = 1
                            }
                            displayGroup = "Opacity"
                            displayName = "Opacity Mono Source"
                            doc = "Determines how to lookup opacity from the supplied texture. mono_alpha, mono_average, mono_luminance, mono_maximum"
                            hidden = false
                            renderType = "mono_mode"
                            sdrMetadata = {
                                string __SDR__enum_value = "mono_average"
                                string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                            }
                        )
                        asset inputs:opacity_texture = @@ (
                            colorSpace = "raw"
                            customData = {
                                asset default = @@
                            }
                            displayGroup = "Opacity"
                            displayName = "Opacity Map"
                            hidden = false
                            renderType = "texture_2d"
                        )
                        float inputs:opacity_threshold = 0 (
                            customData = {
                                float default = 0
                                dictionary range = {
                                    float max = 1
                                    float min = 0
                                }
                            }
                            displayGroup = "Opacity"
                            displayName = "Opacity Threshold"
                            doc = "If 0, use fractional opacity values 'as is'; if > 0, remap opacity values to 1 when >= threshold and to 0 otherwise"
                            hidden = false
                        )
                        asset inputs:ORM_texture = @@ (
                            colorSpace = "raw"
                            customData = {
                                asset default = @@
                            }
                            displayGroup = "Reflectivity"
                            displayName = "ORM Map"
                            doc = "Texture that has Occlusion, Roughness and Metallic maps stored in their respective R, G and B channels"
                            hidden = false
                            renderType = "texture_2d"
                        )
                        bool inputs:project_uvw = 0 (
                            customData = {
                                bool default = 0
                            }
                            displayGroup = "UV"
                            displayName = "Enable Project UVW Coordinates"
                            doc = "When enabled, UV coordinates will be generated by projecting them from a coordinate system"
                            hidden = false
                        )
                        float inputs:reflection_roughness_constant = 0.5 (
                            customData = {
                                float default = 0.5
                                dictionary range = {
                                    float max = 1
                                    float min = 0
                                }
                            }
                            displayGroup = "Reflectivity"
                            displayName = "Roughness Amount"
                            doc = "Higher roughness values lead to more blurry reflections"
                            hidden = false
                        )
                        float inputs:reflection_roughness_texture_influence = 0 (
                            customData = {
                                float default = 0
                                dictionary range = {
                                    float max = 1
                                    float min = 0
                                }
                            }
                            displayGroup = "Reflectivity"
                            displayName = "Roughness Map Influence"
                            doc = "Blends between the constant value and the lookup of the roughness texture"
                            hidden = false
                        )
                        asset inputs:reflectionroughness_texture = @@ (
                            colorSpace = "raw"
                            customData = {
                                asset default = @@
                            }
                            displayGroup = "Reflectivity"
                            displayName = "Roughness Map"
                            hidden = false
                            renderType = "texture_2d"
                        )
                        float inputs:specular_level = 0.5 (
                            customData = {
                                float default = 0.5
                                dictionary soft_range = {
                                    float max = 1
                                    float min = 0
                                }
                            }
                            displayGroup = "Reflectivity"
                            displayName = "Specular"
                            doc = "The specular level (intensity) of the material"
                            hidden = false
                        )
                        float inputs:texture_rotate = 0 (
                            customData = {
                                float default = 0
                            }
                            displayGroup = "UV"
                            displayName = "Texture Rotate"
                            doc = "Rotates angle of texture in degrees."
                            hidden = false
                        )
                        float2 inputs:texture_scale = (1, 1) (
                            customData = {
                                float2 default = (1, 1)
                            }
                            displayGroup = "UV"
                            displayName = "Texture Tiling"
                            doc = "Controls the repetition of the texture."
                            hidden = false
                        )
                        float2 inputs:texture_translate = (0, 0) (
                            customData = {
                                float2 default = (0, 0)
                            }
                            displayGroup = "UV"
                            displayName = "Texture Translate"
                            doc = "Controls position of texture."
                            hidden = false
                        )
                        int inputs:uv_space_index = 0 (
                            customData = {
                                int default = 0
                                dictionary range = {
                                    int max = 3
                                    int min = 0
                                }
                            }
                            displayGroup = "UV"
                            displayName = "UV Space Index"
                            doc = "UV Space Index."
                            hidden = false
                        )
                        bool inputs:world_or_object = 0 (
                            customData = {
                                bool default = 0
                            }
                            displayGroup = "UV"
                            displayName = "Enable World Space"
                            doc = "When enabled, uses world space for projection, otherwise object space is used"
                            hidden = false
                        )
                        token outputs:out (
                            renderType = "material"
                        )
                    }
                }

                over "FOF_Mesh_StickerSG"
                {
                    custom uniform bool paused = 0 (
                        customData = {
                            bool nonpersistant = 1
                        }
                        hidden = true
                    )

                    over "Shader"
                    {
                        reorder properties = ["inputs:diffuse_color_constant", "inputs:diffuse_texture", "inputs:albedo_desaturation", "inputs:albedo_add", "inputs:albedo_brightness", "inputs:diffuse_tint", "inputs:reflection_roughness_constant", "inputs:reflection_roughness_texture_influence", "inputs:reflectionroughness_texture", "inputs:metallic_constant", "inputs:metallic_texture_influence", "inputs:metallic_texture", "inputs:specular_level", "inputs:enable_ORM_texture", "inputs:ORM_texture", "inputs:ao_to_diffuse", "inputs:ao_texture", "inputs:enable_emission", "inputs:emissive_color", "inputs:emissive_color_texture", "inputs:emissive_mask_texture", "inputs:emissive_intensity", "inputs:enable_opacity", "inputs:opacity_texture", "inputs:opacity_constant", "inputs:enable_opacity_texture", "inputs:opacity_mode", "inputs:opacity_threshold", "inputs:geometry_normal_roughness_strength", "inputs:bump_factor", "inputs:normalmap_texture", "inputs:detail_bump_factor", "inputs:detail_normalmap_texture", "inputs:flip_tangent_u", "inputs:flip_tangent_v", "inputs:project_uvw", "inputs:world_or_object", "inputs:uv_space_index", "inputs:texture_translate", "inputs:texture_rotate", "inputs:texture_scale", "inputs:detail_texture_translate", "inputs:detail_texture_rotate", "inputs:detail_texture_scale"]
                        float inputs:albedo_add = 0 (
                            customData = {
                                float default = 0
                                dictionary soft_range = {
                                    float max = 1
                                    float min = -1
                                }
                            }
                            displayGroup = "Albedo"
                            displayName = "Albedo Add"
                            doc = "Adds a constant value to the diffuse color "
                            hidden = false
                        )
                        float inputs:albedo_brightness = 1 (
                            customData = {
                                float default = 1
                                dictionary soft_range = {
                                    float max = 1
                                    float min = 0
                                }
                            }
                            displayGroup = "Albedo"
                            displayName = "Albedo Brightness"
                            doc = "Multiplier for the diffuse color "
                            hidden = false
                        )
                        float inputs:albedo_desaturation = 0 (
                            customData = {
                                float default = 0
                                dictionary soft_range = {
                                    float max = 1
                                    float min = 0
                                }
                            }
                            displayGroup = "Albedo"
                            displayName = "Albedo Desaturation"
                            doc = "Desaturates the diffuse color"
                            hidden = false
                        )
                        asset inputs:ao_texture = @@ (
                            colorSpace = "raw"
                            customData = {
                                asset default = @@
                            }
                            displayGroup = "AO"
                            displayName = "Ambient Occlusion Map"
                            doc = "The ambient occlusion texture for the material"
                            hidden = false
                            renderType = "texture_2d"
                        )
                        float inputs:ao_to_diffuse = 0 (
                            customData = {
                                float default = 0
                                dictionary range = {
                                    float max = 1
                                    float min = 0
                                }
                            }
                            displayGroup = "AO"
                            displayName = "AO to diffuse"
                            doc = "Controls the amount of ambient occlusion multiplied against the diffuse color channel"
                            hidden = false
                        )
                        float inputs:bump_factor = 1 (
                            customData = {
                                float default = 1
                                dictionary soft_range = {
                                    float max = 1
                                    float min = 0
                                }
                            }
                            displayGroup = "Normal"
                            displayName = "Normal Strength"
                            doc = "Strength of normal map"
                            hidden = false
                        )
                        float inputs:detail_bump_factor = 0.3 (
                            customData = {
                                float default = 0.3
                                dictionary soft_range = {
                                    float max = 1
                                    float min = 0
                                }
                            }
                            displayGroup = "Normal"
                            displayName = "Detail Normal Strength"
                            doc = "Strength of the detail normal"
                            hidden = false
                        )
                        asset inputs:detail_normalmap_texture = @@ (
                            colorSpace = "raw"
                            customData = {
                                asset default = @@
                            }
                            displayGroup = "Normal"
                            displayName = "Detail Normal Map"
                            hidden = false
                            renderType = "texture_2d"
                        )
                        float inputs:detail_texture_rotate = 0 (
                            customData = {
                                float default = 0
                            }
                            displayGroup = "UV"
                            displayName = "Detail Texture Rotate"
                            doc = "Rotates angle of the detail texture in degrees."
                            hidden = false
                        )
                        float2 inputs:detail_texture_scale = (1, 1) (
                            customData = {
                                float2 default = (1, 1)
                            }
                            displayGroup = "UV"
                            displayName = "Detail Texture Tiling"
                            doc = "Controls the repetition of the detail texture."
                            hidden = false
                        )
                        float2 inputs:detail_texture_translate = (0, 0) (
                            customData = {
                                float2 default = (0, 0)
                            }
                            displayGroup = "UV"
                            displayName = "Detail Texture Translate"
                            doc = "Controls the position of the detail texture."
                            hidden = false
                        )
                        color3f inputs:diffuse_color_constant (
                            displayName = "Albedo Color"
                            doc = "This is the albedo base color"
                            hidden = false
                            renderType = "color"
                        )
                        asset inputs:diffuse_texture (
                            colorSpace = "auto"
                            hidden = false
                            renderType = "texture_2d"
                        )
                        color3f inputs:diffuse_tint = (1, 1, 1) (
                            customData = {
                                float3 default = (1, 1, 1)
                            }
                            displayGroup = "Albedo"
                            displayName = "Color Tint"
                            doc = "When enabled, this color value is multiplied over the final albedo color"
                            hidden = false
                            renderType = "color"
                        )
                        color3f inputs:emissive_color = (1, 0.1, 0.1) (
                            customData = {
                                float3 default = (1, 0.1, 0.1)
                            }
                            displayGroup = "Emissive"
                            displayName = "Emissive Color"
                            doc = "The emission color"
                            hidden = false
                            renderType = "color"
                        )
                        asset inputs:emissive_color_texture = @@ (
                            colorSpace = "auto"
                            customData = {
                                asset default = @@
                            }
                            displayGroup = "Emissive"
                            displayName = "Emissive Color map"
                            doc = "The emissive color texture"
                            hidden = false
                            renderType = "texture_2d"
                        )
                        float inputs:emissive_intensity = 40 (
                            customData = {
                                float default = 40
                            }
                            displayGroup = "Emissive"
                            displayName = "Emissive Intensity"
                            doc = "Intensity of the emission"
                            hidden = false
                        )
                        asset inputs:emissive_mask_texture = @@ (
                            colorSpace = "raw"
                            customData = {
                                asset default = @@
                            }
                            displayGroup = "Emissive"
                            displayName = "Emissive Mask map"
                            doc = "The texture masking the emissive color"
                            hidden = false
                            renderType = "texture_2d"
                        )
                        bool inputs:enable_emission = 0 (
                            customData = {
                                bool default = 0
                            }
                            displayGroup = "Emissive"
                            displayName = "Enable Emission"
                            doc = "Enables the emission of light from the material"
                            hidden = false
                        )
                        bool inputs:enable_opacity = 0 (
                            customData = {
                                bool default = 0
                            }
                            displayGroup = "Opacity"
                            displayName = "Enable Opacity"
                            doc = "Enables the use of cutout opacity"
                            hidden = false
                        )
                        bool inputs:enable_opacity_texture = 0 (
                            customData = {
                                bool default = 0
                            }
                            displayGroup = "Opacity"
                            displayName = "Enable Opacity Texture"
                            doc = "Enables or disables the usage of the opacity texture map"
                            hidden = false
                        )
                        bool inputs:enable_ORM_texture = 0 (
                            customData = {
                                bool default = 0
                            }
                            displayGroup = "Reflectivity"
                            displayName = "Enable ORM Texture"
                            doc = "The ORM texture will be used to extract the Occlusion, Roughness and Metallic textures from R,G,B channels"
                            hidden = false
                        )
                        bool inputs:flip_tangent_u = 0 (
                            customData = {
                                bool default = 0
                            }
                            displayGroup = "Normal"
                            displayName = "Normal Map Flip U Tangent"
                            hidden = false
                        )
                        bool inputs:flip_tangent_v = 1 (
                            customData = {
                                bool default = 1
                            }
                            displayGroup = "Normal"
                            displayName = "Normal Map Flip V Tangent"
                            hidden = false
                        )
                        float inputs:geometry_normal_roughness_strength = 1 (
                            customData = {
                                float default = 1
                                dictionary range = {
                                    float max = 1
                                    float min = 0
                                }
                            }
                            displayGroup = "Normal"
                            displayName = "Normal map to roughness weight"
                            doc = "Enables and weights roughness induced by normal maps"
                            hidden = false
                        )
                        float inputs:metallic_constant = 0 (
                            customData = {
                                float default = 0
                                dictionary range = {
                                    float max = 1
                                    float min = 0
                                }
                            }
                            displayGroup = "Reflectivity"
                            displayName = "Metallic Amount"
                            doc = "Metallic Material"
                            hidden = false
                        )
                        asset inputs:metallic_texture = @@ (
                            colorSpace = "raw"
                            customData = {
                                asset default = @@
                            }
                            displayGroup = "Reflectivity"
                            displayName = "Metallic Map"
                            hidden = false
                            renderType = "texture_2d"
                        )
                        float inputs:metallic_texture_influence = 0 (
                            customData = {
                                float default = 0
                                dictionary range = {
                                    float max = 1
                                    float min = 0
                                }
                            }
                            displayGroup = "Reflectivity"
                            displayName = "Metallic Map Influence"
                            doc = "Blends between the constant value and the lookup of the metallic texture"
                            hidden = false
                        )
                        asset inputs:normalmap_texture = @@ (
                            colorSpace = "raw"
                            customData = {
                                asset default = @@
                            }
                            displayGroup = "Normal"
                            displayName = "Normal Map"
                            hidden = false
                            renderType = "texture_2d"
                        )
                        float inputs:opacity_constant = 1 (
                            customData = {
                                float default = 1
                                dictionary range = {
                                    float max = 1
                                    float min = 0
                                }
                            }
                            displayGroup = "Opacity"
                            displayName = "Opacity Amount"
                            doc = "Opacity value between 0 and 1, when Opacity Map is not valid"
                            hidden = false
                        )
                        int inputs:opacity_mode = 1 (
                            customData = {
                                int default = 1
                            }
                            displayGroup = "Opacity"
                            displayName = "Opacity Mono Source"
                            doc = "Determines how to lookup opacity from the supplied texture. mono_alpha, mono_average, mono_luminance, mono_maximum"
                            hidden = false
                            renderType = "mono_mode"
                            sdrMetadata = {
                                string __SDR__enum_value = "mono_average"
                                string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                            }
                        )
                        asset inputs:opacity_texture = @@ (
                            colorSpace = "raw"
                            customData = {
                                asset default = @@
                            }
                            displayGroup = "Opacity"
                            displayName = "Opacity Map"
                            hidden = false
                            renderType = "texture_2d"
                        )
                        float inputs:opacity_threshold = 0 (
                            customData = {
                                float default = 0
                                dictionary range = {
                                    float max = 1
                                    float min = 0
                                }
                            }
                            displayGroup = "Opacity"
                            displayName = "Opacity Threshold"
                            doc = "If 0, use fractional opacity values 'as is'; if > 0, remap opacity values to 1 when >= threshold and to 0 otherwise"
                            hidden = false
                        )
                        asset inputs:ORM_texture = @@ (
                            colorSpace = "raw"
                            customData = {
                                asset default = @@
                            }
                            displayGroup = "Reflectivity"
                            displayName = "ORM Map"
                            doc = "Texture that has Occlusion, Roughness and Metallic maps stored in their respective R, G and B channels"
                            hidden = false
                            renderType = "texture_2d"
                        )
                        bool inputs:project_uvw = 0 (
                            customData = {
                                bool default = 0
                            }
                            displayGroup = "UV"
                            displayName = "Enable Project UVW Coordinates"
                            doc = "When enabled, UV coordinates will be generated by projecting them from a coordinate system"
                            hidden = false
                        )
                        float inputs:reflection_roughness_constant = 0.5 (
                            customData = {
                                float default = 0.5
                                dictionary range = {
                                    float max = 1
                                    float min = 0
                                }
                            }
                            displayGroup = "Reflectivity"
                            displayName = "Roughness Amount"
                            doc = "Higher roughness values lead to more blurry reflections"
                            hidden = false
                        )
                        float inputs:reflection_roughness_texture_influence = 0 (
                            customData = {
                                float default = 0
                                dictionary range = {
                                    float max = 1
                                    float min = 0
                                }
                            }
                            displayGroup = "Reflectivity"
                            displayName = "Roughness Map Influence"
                            doc = "Blends between the constant value and the lookup of the roughness texture"
                            hidden = false
                        )
                        asset inputs:reflectionroughness_texture = @@ (
                            colorSpace = "raw"
                            customData = {
                                asset default = @@
                            }
                            displayGroup = "Reflectivity"
                            displayName = "Roughness Map"
                            hidden = false
                            renderType = "texture_2d"
                        )
                        float inputs:specular_level = 0.5 (
                            customData = {
                                float default = 0.5
                                dictionary soft_range = {
                                    float max = 1
                                    float min = 0
                                }
                            }
                            displayGroup = "Reflectivity"
                            displayName = "Specular"
                            doc = "The specular level (intensity) of the material"
                            hidden = false
                        )
                        float inputs:texture_rotate = 0 (
                            customData = {
                                float default = 0
                            }
                            displayGroup = "UV"
                            displayName = "Texture Rotate"
                            doc = "Rotates angle of texture in degrees."
                            hidden = false
                        )
                        float2 inputs:texture_scale = (1, 1) (
                            customData = {
                                float2 default = (1, 1)
                            }
                            displayGroup = "UV"
                            displayName = "Texture Tiling"
                            doc = "Controls the repetition of the texture."
                            hidden = false
                        )
                        float2 inputs:texture_translate = (0, 0) (
                            customData = {
                                float2 default = (0, 0)
                            }
                            displayGroup = "UV"
                            displayName = "Texture Translate"
                            doc = "Controls position of texture."
                            hidden = false
                        )
                        int inputs:uv_space_index = 0 (
                            customData = {
                                int default = 0
                                dictionary range = {
                                    int max = 3
                                    int min = 0
                                }
                            }
                            displayGroup = "UV"
                            displayName = "UV Space Index"
                            doc = "UV Space Index."
                            hidden = false
                        )
                        bool inputs:world_or_object = 0 (
                            customData = {
                                bool default = 0
                            }
                            displayGroup = "UV"
                            displayName = "Enable World Space"
                            doc = "When enabled, uses world space for projection, otherwise object space is used"
                            hidden = false
                        )
                        token outputs:out (
                            renderType = "material"
                        )
                    }
                }

                over "FOF_Mesh_Magenta_BoxSG"
                {
                    custom uniform bool paused = 0 (
                        customData = {
                            bool nonpersistant = 1
                        }
                        hidden = true
                    )

                    over "Shader"
                    {
                        reorder properties = ["inputs:diffuse_color_constant", "inputs:diffuse_texture", "inputs:albedo_desaturation", "inputs:albedo_add", "inputs:albedo_brightness", "inputs:diffuse_tint", "inputs:reflection_roughness_constant", "inputs:reflection_roughness_texture_influence", "inputs:reflectionroughness_texture", "inputs:metallic_constant", "inputs:metallic_texture_influence", "inputs:metallic_texture", "inputs:specular_level", "inputs:enable_ORM_texture", "inputs:ORM_texture", "inputs:ao_to_diffuse", "inputs:ao_texture", "inputs:enable_emission", "inputs:emissive_color", "inputs:emissive_color_texture", "inputs:emissive_mask_texture", "inputs:emissive_intensity", "inputs:enable_opacity", "inputs:opacity_texture", "inputs:opacity_constant", "inputs:enable_opacity_texture", "inputs:opacity_mode", "inputs:opacity_threshold", "inputs:geometry_normal_roughness_strength", "inputs:bump_factor", "inputs:normalmap_texture", "inputs:detail_bump_factor", "inputs:detail_normalmap_texture", "inputs:flip_tangent_u", "inputs:flip_tangent_v", "inputs:project_uvw", "inputs:world_or_object", "inputs:uv_space_index", "inputs:texture_translate", "inputs:texture_rotate", "inputs:texture_scale", "inputs:detail_texture_translate", "inputs:detail_texture_rotate", "inputs:detail_texture_scale"]
                        float inputs:albedo_add = 0 (
                            customData = {
                                float default = 0
                                dictionary soft_range = {
                                    float max = 1
                                    float min = -1
                                }
                            }
                            displayGroup = "Albedo"
                            displayName = "Albedo Add"
                            doc = "Adds a constant value to the diffuse color "
                            hidden = false
                        )
                        float inputs:albedo_brightness = 1 (
                            customData = {
                                float default = 1
                                dictionary soft_range = {
                                    float max = 1
                                    float min = 0
                                }
                            }
                            displayGroup = "Albedo"
                            displayName = "Albedo Brightness"
                            doc = "Multiplier for the diffuse color "
                            hidden = false
                        )
                        float inputs:albedo_desaturation = 0 (
                            customData = {
                                float default = 0
                                dictionary soft_range = {
                                    float max = 1
                                    float min = 0
                                }
                            }
                            displayGroup = "Albedo"
                            displayName = "Albedo Desaturation"
                            doc = "Desaturates the diffuse color"
                            hidden = false
                        )
                        asset inputs:ao_texture = @@ (
                            colorSpace = "raw"
                            customData = {
                                asset default = @@
                            }
                            displayGroup = "AO"
                            displayName = "Ambient Occlusion Map"
                            doc = "The ambient occlusion texture for the material"
                            hidden = false
                            renderType = "texture_2d"
                        )
                        float inputs:ao_to_diffuse = 0 (
                            customData = {
                                float default = 0
                                dictionary range = {
                                    float max = 1
                                    float min = 0
                                }
                            }
                            displayGroup = "AO"
                            displayName = "AO to diffuse"
                            doc = "Controls the amount of ambient occlusion multiplied against the diffuse color channel"
                            hidden = false
                        )
                        float inputs:bump_factor = 1 (
                            customData = {
                                float default = 1
                                dictionary soft_range = {
                                    float max = 1
                                    float min = 0
                                }
                            }
                            displayGroup = "Normal"
                            displayName = "Normal Strength"
                            doc = "Strength of normal map"
                            hidden = false
                        )
                        float inputs:detail_bump_factor = 0.3 (
                            customData = {
                                float default = 0.3
                                dictionary soft_range = {
                                    float max = 1
                                    float min = 0
                                }
                            }
                            displayGroup = "Normal"
                            displayName = "Detail Normal Strength"
                            doc = "Strength of the detail normal"
                            hidden = false
                        )
                        asset inputs:detail_normalmap_texture = @@ (
                            colorSpace = "raw"
                            customData = {
                                asset default = @@
                            }
                            displayGroup = "Normal"
                            displayName = "Detail Normal Map"
                            hidden = false
                            renderType = "texture_2d"
                        )
                        float inputs:detail_texture_rotate = 0 (
                            customData = {
                                float default = 0
                            }
                            displayGroup = "UV"
                            displayName = "Detail Texture Rotate"
                            doc = "Rotates angle of the detail texture in degrees."
                            hidden = false
                        )
                        float2 inputs:detail_texture_scale = (1, 1) (
                            customData = {
                                float2 default = (1, 1)
                            }
                            displayGroup = "UV"
                            displayName = "Detail Texture Tiling"
                            doc = "Controls the repetition of the detail texture."
                            hidden = false
                        )
                        float2 inputs:detail_texture_translate = (0, 0) (
                            customData = {
                                float2 default = (0, 0)
                            }
                            displayGroup = "UV"
                            displayName = "Detail Texture Translate"
                            doc = "Controls the position of the detail texture."
                            hidden = false
                        )
                        color3f inputs:diffuse_color_constant = (0.23367973, 0.21716607, 0.24050635) (
                            displayName = "Albedo Color"
                            doc = "This is the albedo base color"
                            hidden = false
                            renderType = "color"
                        )
                        asset inputs:diffuse_texture = @@ (
                            hidden = false
                            renderType = "texture_2d"
                        )
                        color3f inputs:diffuse_tint = (1, 1, 1) (
                            customData = {
                                float3 default = (1, 1, 1)
                            }
                            displayGroup = "Albedo"
                            displayName = "Color Tint"
                            doc = "When enabled, this color value is multiplied over the final albedo color"
                            hidden = false
                            renderType = "color"
                        )
                        color3f inputs:emissive_color = (1, 0.1, 0.1) (
                            customData = {
                                float3 default = (1, 0.1, 0.1)
                            }
                            displayGroup = "Emissive"
                            displayName = "Emissive Color"
                            doc = "The emission color"
                            hidden = false
                            renderType = "color"
                        )
                        asset inputs:emissive_color_texture = @@ (
                            colorSpace = "auto"
                            customData = {
                                asset default = @@
                            }
                            displayGroup = "Emissive"
                            displayName = "Emissive Color map"
                            doc = "The emissive color texture"
                            hidden = false
                            renderType = "texture_2d"
                        )
                        float inputs:emissive_intensity = 40 (
                            customData = {
                                float default = 40
                            }
                            displayGroup = "Emissive"
                            displayName = "Emissive Intensity"
                            doc = "Intensity of the emission"
                            hidden = false
                        )
                        asset inputs:emissive_mask_texture = @@ (
                            colorSpace = "raw"
                            customData = {
                                asset default = @@
                            }
                            displayGroup = "Emissive"
                            displayName = "Emissive Mask map"
                            doc = "The texture masking the emissive color"
                            hidden = false
                            renderType = "texture_2d"
                        )
                        bool inputs:enable_emission = 0 (
                            customData = {
                                bool default = 0
                            }
                            displayGroup = "Emissive"
                            displayName = "Enable Emission"
                            doc = "Enables the emission of light from the material"
                            hidden = false
                        )
                        bool inputs:enable_opacity = 0 (
                            customData = {
                                bool default = 0
                            }
                            displayGroup = "Opacity"
                            displayName = "Enable Opacity"
                            doc = "Enables the use of cutout opacity"
                            hidden = false
                        )
                        bool inputs:enable_opacity_texture = 0 (
                            customData = {
                                bool default = 0
                            }
                            displayGroup = "Opacity"
                            displayName = "Enable Opacity Texture"
                            doc = "Enables or disables the usage of the opacity texture map"
                            hidden = false
                        )
                        bool inputs:enable_ORM_texture = 0 (
                            customData = {
                                bool default = 0
                            }
                            displayGroup = "Reflectivity"
                            displayName = "Enable ORM Texture"
                            doc = "The ORM texture will be used to extract the Occlusion, Roughness and Metallic textures from R,G,B channels"
                            hidden = false
                        )
                        bool inputs:flip_tangent_u = 0 (
                            customData = {
                                bool default = 0
                            }
                            displayGroup = "Normal"
                            displayName = "Normal Map Flip U Tangent"
                            hidden = false
                        )
                        bool inputs:flip_tangent_v = 1 (
                            customData = {
                                bool default = 1
                            }
                            displayGroup = "Normal"
                            displayName = "Normal Map Flip V Tangent"
                            hidden = false
                        )
                        float inputs:geometry_normal_roughness_strength = 1 (
                            customData = {
                                float default = 1
                                dictionary range = {
                                    float max = 1
                                    float min = 0
                                }
                            }
                            displayGroup = "Normal"
                            displayName = "Normal map to roughness weight"
                            doc = "Enables and weights roughness induced by normal maps"
                            hidden = false
                        )
                        float inputs:metallic_constant = 0 (
                            customData = {
                                float default = 0
                                dictionary range = {
                                    float max = 1
                                    float min = 0
                                }
                            }
                            displayGroup = "Reflectivity"
                            displayName = "Metallic Amount"
                            doc = "Metallic Material"
                            hidden = false
                        )
                        asset inputs:metallic_texture = @@ (
                            colorSpace = "raw"
                            customData = {
                                asset default = @@
                            }
                            displayGroup = "Reflectivity"
                            displayName = "Metallic Map"
                            hidden = false
                            renderType = "texture_2d"
                        )
                        float inputs:metallic_texture_influence = 0 (
                            customData = {
                                float default = 0
                                dictionary range = {
                                    float max = 1
                                    float min = 0
                                }
                            }
                            displayGroup = "Reflectivity"
                            displayName = "Metallic Map Influence"
                            doc = "Blends between the constant value and the lookup of the metallic texture"
                            hidden = false
                        )
                        asset inputs:normalmap_texture = @@ (
                            colorSpace = "raw"
                            customData = {
                                asset default = @@
                            }
                            displayGroup = "Normal"
                            displayName = "Normal Map"
                            hidden = false
                            renderType = "texture_2d"
                        )
                        float inputs:opacity_constant = 1 (
                            customData = {
                                float default = 1
                                dictionary range = {
                                    float max = 1
                                    float min = 0
                                }
                            }
                            displayGroup = "Opacity"
                            displayName = "Opacity Amount"
                            doc = "Opacity value between 0 and 1, when Opacity Map is not valid"
                            hidden = false
                        )
                        int inputs:opacity_mode = 1 (
                            customData = {
                                int default = 1
                            }
                            displayGroup = "Opacity"
                            displayName = "Opacity Mono Source"
                            doc = "Determines how to lookup opacity from the supplied texture. mono_alpha, mono_average, mono_luminance, mono_maximum"
                            hidden = false
                            renderType = "mono_mode"
                            sdrMetadata = {
                                string __SDR__enum_value = "mono_average"
                                string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                            }
                        )
                        asset inputs:opacity_texture = @@ (
                            colorSpace = "raw"
                            customData = {
                                asset default = @@
                            }
                            displayGroup = "Opacity"
                            displayName = "Opacity Map"
                            hidden = false
                            renderType = "texture_2d"
                        )
                        float inputs:opacity_threshold = 0 (
                            customData = {
                                float default = 0
                                dictionary range = {
                                    float max = 1
                                    float min = 0
                                }
                            }
                            displayGroup = "Opacity"
                            displayName = "Opacity Threshold"
                            doc = "If 0, use fractional opacity values 'as is'; if > 0, remap opacity values to 1 when >= threshold and to 0 otherwise"
                            hidden = false
                        )
                        asset inputs:ORM_texture = @@ (
                            colorSpace = "raw"
                            customData = {
                                asset default = @@
                            }
                            displayGroup = "Reflectivity"
                            displayName = "ORM Map"
                            doc = "Texture that has Occlusion, Roughness and Metallic maps stored in their respective R, G and B channels"
                            hidden = false
                            renderType = "texture_2d"
                        )
                        bool inputs:project_uvw = 0 (
                            customData = {
                                bool default = 0
                            }
                            displayGroup = "UV"
                            displayName = "Enable Project UVW Coordinates"
                            doc = "When enabled, UV coordinates will be generated by projecting them from a coordinate system"
                            hidden = false
                        )
                        float inputs:reflection_roughness_constant = 0.5 (
                            customData = {
                                float default = 0.5
                                dictionary range = {
                                    float max = 1
                                    float min = 0
                                }
                            }
                            displayGroup = "Reflectivity"
                            displayName = "Roughness Amount"
                            doc = "Higher roughness values lead to more blurry reflections"
                            hidden = false
                        )
                        float inputs:reflection_roughness_texture_influence = 0 (
                            customData = {
                                float default = 0
                                dictionary range = {
                                    float max = 1
                                    float min = 0
                                }
                            }
                            displayGroup = "Reflectivity"
                            displayName = "Roughness Map Influence"
                            doc = "Blends between the constant value and the lookup of the roughness texture"
                            hidden = false
                        )
                        asset inputs:reflectionroughness_texture = @@ (
                            colorSpace = "raw"
                            customData = {
                                asset default = @@
                            }
                            displayGroup = "Reflectivity"
                            displayName = "Roughness Map"
                            hidden = false
                            renderType = "texture_2d"
                        )
                        float inputs:specular_level = 0.5 (
                            customData = {
                                float default = 0.5
                                dictionary soft_range = {
                                    float max = 1
                                    float min = 0
                                }
                            }
                            displayGroup = "Reflectivity"
                            displayName = "Specular"
                            doc = "The specular level (intensity) of the material"
                            hidden = false
                        )
                        float inputs:texture_rotate = 0 (
                            customData = {
                                float default = 0
                            }
                            displayGroup = "UV"
                            displayName = "Texture Rotate"
                            doc = "Rotates angle of texture in degrees."
                            hidden = false
                        )
                        float2 inputs:texture_scale = (1, 1) (
                            customData = {
                                float2 default = (1, 1)
                            }
                            displayGroup = "UV"
                            displayName = "Texture Tiling"
                            doc = "Controls the repetition of the texture."
                            hidden = false
                        )
                        float2 inputs:texture_translate = (0, 0) (
                            customData = {
                                float2 default = (0, 0)
                            }
                            displayGroup = "UV"
                            displayName = "Texture Translate"
                            doc = "Controls position of texture."
                            hidden = false
                        )
                        int inputs:uv_space_index = 0 (
                            customData = {
                                int default = 0
                                dictionary range = {
                                    int max = 3
                                    int min = 0
                                }
                            }
                            displayGroup = "UV"
                            displayName = "UV Space Index"
                            doc = "UV Space Index."
                            hidden = false
                        )
                        bool inputs:world_or_object = 0 (
                            customData = {
                                bool default = 0
                            }
                            displayGroup = "UV"
                            displayName = "Enable World Space"
                            doc = "When enabled, uses world space for projection, otherwise object space is used"
                            hidden = false
                        )
                        token outputs:out (
                            renderType = "material"
                        )
                    }
                }
            }

            over "FOF_Mesh_Label_1"
            {
                token visibility = "inherited"
            }

            over "FOF_Mesh_Label_6_Small"
            {
                token visibility = "invisible"
            }

            over "FOF_Mesh_Magenta_Box" (
                prepend apiSchemas = ["PhysxTriangleMeshSimplificationCollisionAPI"]
            )
            {
                uniform token physics:approximation = "meshSimplification"
                float3 xformOp:rotateXYZ = (90.00001, -0, 0)
                float3 xformOp:scale = (0.00999999, 0.00999999, 0.00999999)
                double3 xformOp:translate = (0, 1.9073485901799365e-8, -0.06820124473718003)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }
    }
}

over "World" (
    active = false
)
{
}

over "Environment"
{
    over "defaultLight"
    {
        quatd xformOp:orient = (0.6532814824381883, 0.2705980500730985, 0.27059805007309845, 0.6532814824381882)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    over "default_environment"
    {
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-1.1102230375845732e-15, 1.2688353239703927, -1.1102230246251565e-15)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "SphereLight"
        {
            quatd xformOp:orient = (0.5000000000000001, 0.5, 0.49999999999999994, 0.5)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 2.5)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }
    }
}

