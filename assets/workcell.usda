#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (50008.48245439056, -1.2811322423346552, 1.8009168123900876)
                double radius = 6.49921875
            }
            dictionary Perspective = {
                double3 position = (-2.3383019250386683, -8.104528931314322, 6.239059812913344)
                double3 target = (-0.8143730797327369, 2.1385719193202792, 0.2054160678729362)
            }
            dictionary Right = {
                double3 position = (-1.3390253924285254, -49999.524, 1.6635517444395298)
                double radius = 18.420742797851563
            }
            dictionary Top = {
                double3 position = (-1.3637662490967428, 0.4629651785479787, 50000.6)
                double radius = 13.629945373535156
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary metricsAssembler = {
            dictionary "/World/table" = {
            }
            int version = 1
        }
        dictionary navmeshSettings = {
            double agentHeight = 180
            double agentRadius = 20
            bool excludeRigidBodies = 1
            int ver = 1
            double voxelCeiling = 460
        }
        dictionary omni_layer = {
            string authoring_layer = "./workcell.usda"
            dictionary locked = {
                bool "./Enviroments/dev_env.usda" = 1
                bool "./Environments/default.usda" = 1
                bool "./Environments/dev_env.usda" = 1
            }
            dictionary muteness = {
            }
        }
        dictionary renderSettings = {
            float3 "rtx:debugView:pixelDebug:textColor" = (0, 1e18, 0)
            float3 "rtx:fog:fogColor" = (0.75, 0.75, 0.75)
            float3 "rtx:index:regionOfInterestMax" = (0, 0, 0)
            float3 "rtx:index:regionOfInterestMin" = (0, 0, 0)
            float3 "rtx:iray:environment_dome_ground_position" = (0, 0, 0)
            float3 "rtx:iray:environment_dome_ground_reflectivity" = (0, 0, 0)
            float3 "rtx:iray:environment_dome_rotation_axis" = (3.4028235e38, 3.4028235e38, 3.4028235e38)
            float3 "rtx:post:backgroundZeroAlpha:backgroundDefaultColor" = (0, 0, 0)
            float3 "rtx:post:colorcorr:contrast" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gain" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gamma" = (1, 1, 1)
            float3 "rtx:post:colorcorr:offset" = (0, 0, 0)
            float3 "rtx:post:colorcorr:saturation" = (1, 1, 1)
            float3 "rtx:post:colorgrad:blackpoint" = (0, 0, 0)
            float3 "rtx:post:colorgrad:contrast" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gain" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gamma" = (1, 1, 1)
            float3 "rtx:post:colorgrad:lift" = (0, 0, 0)
            float3 "rtx:post:colorgrad:multiply" = (1, 1, 1)
            float3 "rtx:post:colorgrad:offset" = (0, 0, 0)
            float3 "rtx:post:colorgrad:whitepoint" = (1, 1, 1)
            float3 "rtx:post:lensDistortion:lensFocalLengthArray" = (10, 30, 50)
            float3 "rtx:post:lensFlares:anisoFlareFalloffX" = (450, 475, 500)
            float3 "rtx:post:lensFlares:anisoFlareFalloffY" = (10, 10, 10)
            float3 "rtx:post:lensFlares:cutoffPoint" = (2, 2, 2)
            float3 "rtx:post:lensFlares:haloFlareFalloff" = (10, 10, 10)
            float3 "rtx:post:lensFlares:haloFlareRadius" = (75, 75, 75)
            float3 "rtx:post:lensFlares:isotropicFlareFalloff" = (50, 50, 50)
            float3 "rtx:post:tonemap:whitepoint" = (1, 1, 1)
            float3 "rtx:raytracing:inscattering:singleScatteringAlbedo" = (0.9, 0.9, 0.9)
            float3 "rtx:raytracing:inscattering:transmittanceColor" = (0.5, 0.5, 0.5)
            float3 "rtx:sceneDb:ambientLightColor" = (0.1, 0.1, 0.1)
        }
    }
    defaultPrim = "Main"
    endTimeCode = 100
    metersPerUnit = 1
    startTimeCode = 0
    subLayers = [
        @./Environments/default.usda@
    ]
    timeCodesPerSecond = 60
    upAxis = "Z"
)

def Xform "Main"
{
    def Xform "Cameras"
    {
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Camera "Workcell_Top"
        {
            float2 clippingRange = (0.01, 10000000)
            float focalLength = 18.147562
            float focusDistance = 400
            bool omni:kit:cameraLock = 1
            custom uniform vector3d omni:kit:centerOfInterest = (0, 0, -400)
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-1.4000000208616257, 0, 7)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Camera "Workcell_Side"
        {
            float2 clippingRange = (0.01, 10000000)
            float focalLength = 18.147562
            float focusDistance = 400
            bool omni:kit:cameraLock = 1
            custom uniform vector3d omni:kit:centerOfInterest = (0, 0, -400)
            quatd xformOp:orient = (0.7071067811865476, 0.7071067811865475, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-1.5, -6, 0.5)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Camera "Workcell_Perspective"
        {
            float2 clippingRange = (0.01, 10000000)
            float focalLength = 18.147562
            float focusDistance = 400
            custom uniform vector3d omni:kit:centerOfInterest = (0, 0, -11.5639272151109)
            quatd xformOp:orient = (0.8648915164597791, 0.5018444183727242, 0.005378351055829955, 0.009269187880606685)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0.06904686378895371, -4.23903402680438, 3.0698485728196356)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }
    }

    def RectLight "RectLight_Conveyor_End" (
        active = false
        prepend apiSchemas = ["ShapingAPI"]
    )
    {
        float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
        float inputs:height = 1
        float inputs:intensity = 5000
        float inputs:shaping:cone:angle = 180
        float inputs:shaping:cone:softness
        float inputs:shaping:focus
        color3f inputs:shaping:focusTint
        asset inputs:shaping:ies:file
        float inputs:width = 1
        quatd xformOp:orient = (0.6589721757548671, 0.24203281773588833, -0.25215888766748085, -0.666026787817143)
        double3 xformOp:scale = (2.5955598393074855, 1, 0.9999999999999998)
        double3 xformOp:translate = (-3.960166955511721, -0.40447433903614144, 2.420274118666174)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def "basket_bottom" (
        delete apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI"]
        prepend payload = @./basket/basket_white.usd@
    )
    {
        quatf xformOp:orient = (0.70710677, 0, 0, 0.70710677)
        float3 xformOp:scale = (1, 1.6117932, 1)
        double3 xformOp:translate = (0.15081395302419176, 5.162141691899876e-9, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "basket_base"
        {
            float3 xformOp:rotateXYZ = (0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-3.216093493798839e-22, -0.09227431572308833, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

            over "basket"
            {
                over "Meshes"
                {
                    over "Sketchfab_model"
                    {
                        over "LAUNDRY_BASKET_obj_cleaner_materialmerger_gles"
                        {
                            over "Object_2"
                            {
                                over "Object_0" (
                                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI"]
                                )
                                {
                                    uniform token physics:approximation = "convexHull"
                                    bool physics:collisionEnabled = 1
                                }
                            }
                        }
                    }
                }
            }

            over "Materials"
            {
                over "Material"
                {
                    over "pbr_shader"
                    {
                        color3f inputs:diffuseColor = (0.37974304, 0.37974417, 0.37974685) (
                            hidden = false
                            renderType = "color"
                        )
                    }
                }
            }

            over "collision"
            {
                token visibility = "invisible"

                over "edge_02" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxTriangleMeshCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token physics:approximation = "none"
                    bool physics:collisionEnabled = 1
                }

                over "edge_03" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxTriangleMeshCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token physics:approximation = "none"
                    bool physics:collisionEnabled = 1
                }

                over "edge_04" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxTriangleMeshCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token physics:approximation = "none"
                    bool physics:collisionEnabled = 1
                }

                over "edge_1" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxTriangleMeshCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token physics:approximation = "none"
                    bool physics:collisionEnabled = 1
                }

                over "side_02" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxTriangleMeshCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token physics:approximation = "none"
                    bool physics:collisionEnabled = 1
                }

                over "side_03" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxTriangleMeshCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token physics:approximation = "none"
                    bool physics:collisionEnabled = 1
                }

                over "side_1" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxTriangleMeshCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token physics:approximation = "none"
                    bool physics:collisionEnabled = 1
                }

                over "side_2" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxTriangleMeshCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token physics:approximation = "none"
                    bool physics:collisionEnabled = 1
                }

                over "bottom" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxTriangleMeshCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token physics:approximation = "none"
                    bool physics:collisionEnabled = 1
                }
            }
        }
    }

    def Xform "PickingUnit" (
        kind = "group"
    )
    {
        float3 xformOp:rotateXYZ = (0, 0, 90)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-1.1202227822839412, 1.3353054408866818, 0)
        float3 xformOp:translate:pivot = (0.02677745, -0.00008325577, 0.95733154)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:translate:pivot", "xformOp:rotateXYZ", "xformOp:scale", "!invert!xformOp:translate:pivot"]

        def Xform "Baskets" (
            kind = "group"
        )
        {
            float3 xformOp:rotateXYZ = (0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0.25, 0, 0)
            float3 xformOp:translate:pivot = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:translate:pivot", "xformOp:rotateXYZ", "xformOp:scale", "!invert!xformOp:translate:pivot"]

            def "basket_blue" (
                delete apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI"]
                prepend payload = @./basket/basket_blue.usd@
            )
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0.48, 0.78)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "basket_base"
                {
                    over "basket"
                    {
                        over "Meshes" (
                            delete apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI"]
                        )
                        {
                            over "Sketchfab_model"
                            {
                                over "LAUNDRY_BASKET_obj_cleaner_materialmerger_gles"
                                {
                                    over "Object_2"
                                    {
                                        over "Object_0" (
                                            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI", "PhysxCookedDataAPI:convexHull"]
                                        )
                                        {
                                            uniform token physics:approximation = "convexHull"
                                            bool physics:collisionEnabled = 1
                                            uchar[] physxCookedData:convexHull:buffer = [9, 141, 141, 240, 226, 137, 38, 230, 30, 5, 144, 116, 194, 96, 184, 204, 59, 78, 88, 83, 1, 67, 86, 88, 77, 14, 0, 0, 0, 0, 0, 0, 0, 73, 67, 69, 1, 67, 76, 72, 76, 9, 0, 0, 0, 34, 0, 0, 0, 96, 128, 0, 0, 64, 0, 0, 0, 192, 0, 0, 0, 221, 179, 172, 63, 201, 145, 30, 191, 243, 202, 141, 62, 69, 213, 189, 63, 92, 147, 254, 62, 79, 176, 185, 63, 234, 203, 188, 63, 194, 166, 62, 191, 192, 179, 185, 63, 221, 179, 172, 191, 201, 145, 30, 63, 243, 202, 141, 62, 69, 213, 189, 191, 92, 147, 254, 190, 79, 176, 185, 63, 234, 203, 188, 191, 84, 168, 62, 63, 200, 179, 185, 63, 210, 139, 74, 62, 78, 153, 147, 63, 138, 58, 179, 62, 18, 80, 145, 63, 37, 59, 90, 63, 240, 194, 6, 62, 6, 128, 136, 191, 227, 168, 108, 63, 74, 154, 31, 62, 64, 138, 74, 190, 53, 153, 147, 191, 147, 56, 179, 62, 18, 80, 145, 191, 37, 59, 90, 191, 240, 194, 6, 62, 6, 128, 136, 63, 227, 168, 108, 191, 74, 154, 31, 62, 165, 107, 174, 191, 240, 136, 50, 191, 195, 159, 177, 62, 74, 207, 180, 191, 240, 249, 101, 191, 66, 181, 185, 63, 173, 107, 174, 63, 209, 116, 50, 63, 140, 160, 177, 62, 74, 207, 180, 63, 240, 249, 101, 63, 66, 181, 185, 63, 1, 52, 90, 62, 134, 229, 159, 191, 13, 168, 185, 63, 165, 107, 136, 191, 10, 189, 144, 191, 177, 165, 185, 63, 1, 52, 90, 190, 134, 229, 159, 63, 13, 168, 185, 63, 165, 107, 136, 63, 10, 189, 144, 63, 177, 165, 185, 63, 93, 24, 125, 63, 252, 110, 38, 191, 137, 152, 18, 61, 185, 84, 125, 191, 227, 53, 135, 191, 50, 59, 179, 62, 104, 202, 136, 63, 26, 23, 132, 63, 218, 29, 178, 62, 93, 24, 125, 191, 252, 110, 38, 63, 137, 152, 18, 61, 164, 54, 161, 191, 59, 197, 102, 63, 26, 162, 178, 62, 122, 54, 161, 63, 245, 104, 102, 191, 223, 167, 178, 62, 9, 166, 74, 191, 80, 141, 139, 63, 122, 54, 179, 62, 147, 138, 142, 191, 25, 85, 138, 63, 181, 84, 194, 63, 243, 2, 24, 63, 170, 99, 143, 191, 112, 64, 179, 62, 147, 138, 142, 63, 25, 85, 138, 191, 181, 84, 194, 63, 5, 194, 146, 191, 18, 136, 129, 191, 124, 11, 197, 63, 5, 194, 146, 63, 18, 136, 129, 63, 124, 11, 197, 63, 245, 19, 166, 63, 171, 37, 131, 191, 91, 177, 185, 63, 245, 19, 166, 191, 171, 37, 131, 63, 91, 177, 185, 63, 16, 133, 126, 63, 220, 184, 212, 187, 1, 132, 219, 189, 79, 107, 168, 191, 0, 0, 3, 5, 16, 133, 126, 191, 115, 184, 212, 59, 6, 132, 219, 189, 79, 107, 168, 191, 3, 0, 3, 2, 252, 14, 56, 60, 158, 71, 28, 63, 251, 189, 74, 191, 230, 156, 219, 190, 6, 0, 3, 16, 251, 10, 56, 188, 26, 70, 28, 191, 40, 191, 74, 191, 220, 153, 219, 190, 9, 0, 3, 18, 79, 119, 126, 191, 2, 196, 141, 59, 129, 175, 223, 189, 155, 35, 168, 191, 12, 0, 3, 1, 87, 192, 50, 191, 162, 18, 253, 188, 171, 22, 55, 191, 69, 147, 57, 191, 15, 0, 3, 1, 166, 104, 123, 191, 14, 195, 48, 190, 71, 75, 155, 189, 158, 85, 183, 191, 18, 0, 3, 15, 83, 119, 126, 63, 246, 206, 141, 187, 222, 174, 223, 189, 167, 35, 168, 191, 21, 0, 3, 4, 121, 194, 50, 63, 57, 35, 253, 60, 143, 20, 55, 191, 105, 150, 57, 191, 24, 0, 3, 4, 108, 104, 123, 63, 231, 194, 48, 62, 20, 100, 155, 189, 48, 83, 183, 191, 27, 0, 3, 13, 229, 145, 188, 189, 11, 143, 126, 191, 93, 204, 86, 189, 191, 191, 146, 191, 30, 0, 3, 18, 230, 145, 188, 61, 14, 143, 126, 63, 200, 201, 86, 189, 222, 191, 146, 191, 33, 0, 3, 16, 226, 84, 14, 63, 139, 23, 163, 186, 16, 201, 84, 191, 219, 78, 5, 191, 36, 0, 3, 4, 73, 127, 14, 63, 142, 83, 72, 190, 166, 177, 78, 191, 214, 10, 38, 191, 39, 0, 3, 5, 156, 123, 71, 187, 142, 171, 205, 190, 173, 111, 106, 191, 24, 200, 102, 190, 42, 0, 3, 18, 204, 202, 189, 189, 77, 14, 66, 191, 36, 70, 37, 191, 175, 155, 42, 191, 45, 0, 3, 19, 141, 199, 247, 189, 242, 98, 125, 191, 10, 76, 154, 189, 113, 199, 145, 191, 48, 0, 3, 19, 137, 233, 13, 191, 65, 177, 83, 191, 77, 52, 193, 189, 73, 204, 177, 191, 51, 0, 3, 15, 50, 1, 47, 191, 34, 68, 54, 191, 150, 92, 36, 190, 45, 170, 175, 191, 54, 0, 3, 15, 133, 104, 45, 191, 1, 182, 52, 191, 51, 1, 84, 190, 0, 248, 171, 191, 57, 0, 3, 15, 165, 102, 219, 61, 238, 242, 71, 63, 101, 126, 29, 191, 124, 219, 52, 191, 60, 0, 3, 17, 9, 86, 12, 62, 138, 148, 124, 63, 236, 94, 180, 189, 148, 38, 145, 191, 63, 0, 3, 17, 29, 42, 14, 63, 129, 20, 84, 63, 128, 21, 149, 189, 170, 38, 182, 191, 66, 0, 3, 13, 42, 19, 62, 63, 238, 251, 38, 63, 121, 37, 28, 190, 43, 239, 180, 191, 69, 0, 3, 13, 61, 74, 55, 63, 255, 34, 33, 63, 21, 155, 154, 190, 181, 162, 167, 191, 72, 0, 3, 13, 156, 123, 71, 59, 142, 171, 205, 62, 173, 111, 106, 191, 24, 200, 102, 190, 75, 0, 3, 16, 134, 251, 32, 61, 73, 206, 116, 61, 30, 88, 127, 191, 102, 56, 18, 61, 78, 0, 3, 30, 134, 251, 32, 189, 73, 206, 116, 189, 30, 88, 127, 191, 102, 56, 18, 61, 81, 0, 3, 31, 226, 84, 14, 191, 139, 23, 163, 58, 16, 201, 84, 191, 219, 78, 5, 191, 84, 0, 3, 1, 73, 127, 14, 191, 142, 83, 72, 62, 166, 177, 78, 191, 214, 10, 38, 191, 87, 0, 3, 2, 155, 79, 45, 191, 94, 230, 192, 62, 160, 218, 33, 191, 170, 193, 120, 191, 90, 0, 3, 2, 231, 1, 111, 191, 192, 209, 169, 62, 16, 171, 10, 190, 93, 188, 182, 191, 93, 0, 3, 2, 26, 145, 45, 63, 218, 206, 193, 190, 198, 78, 33, 191, 195, 136, 121, 191, 96, 0, 3, 5, 222, 220, 110, 63, 113, 156, 170, 190, 187, 196, 10, 190, 223, 193, 182, 191, 99, 0, 3, 5, 75, 3, 185, 190, 234, 162, 101, 63, 107, 81, 130, 190, 8, 100, 150, 191, 102, 0, 3, 29, 117, 93, 63, 190, 68, 62, 123, 63, 213, 53, 50, 189, 245, 241, 153, 191, 105, 0, 3, 29, 13, 18, 129, 189, 55, 238, 125, 63, 59, 144, 225, 189, 4, 224, 139, 191, 108, 0, 3, 16, 154, 119, 78, 189, 57, 42, 75, 63, 133, 56, 27, 191, 101, 98, 49, 191, 111, 0, 3, 16, 201, 179, 157, 62, 2, 164, 110, 191, 4, 178, 66, 190, 114, 142, 148, 191, 114, 0, 3, 27, 83, 205, 63, 62, 22, 36, 123, 191, 76, 129, 77, 189, 222, 167, 152, 191, 117, 0, 3, 27, 111, 38, 41, 61, 164, 112, 126, 191, 132, 78, 209, 189, 13, 19, 141, 191, 120, 0, 3, 18, 223, 104, 252, 60, 9, 144, 61, 191, 23, 223, 43, 191, 108, 221, 28, 191, 123, 0, 3, 18, 226, 183, 71, 190, 212, 25, 85, 60, 201, 15, 123, 63, 171, 46, 220, 191, 126, 0, 3, 20, 16, 96, 129, 190, 77, 33, 205, 58, 43, 177, 119, 63, 250, 135, 227, 191, 129, 0, 3, 20, 76, 6, 173, 190, 59, 208, 113, 189, 237, 118, 112, 63, 84, 84, 242, 191, 132, 0, 3, 7, 26, 180, 243, 190, 185, 20, 54, 191, 39, 107, 4, 63, 42, 244, 3, 192, 135, 0, 3, 7, 13, 180, 108, 189, 66, 164, 31, 191, 42, 148, 71, 63, 185, 223, 242, 191, 138, 0, 3, 7, 152, 10, 22, 187, 7, 172, 185, 190, 183, 146, 110, 63, 206, 240, 230, 191, 141, 0, 3, 23, 6, 145, 20, 188, 6, 83, 40, 60, 217, 249, 127, 63, 191, 6, 197, 191, 144, 0, 3, 20, 6, 145, 20, 60, 6, 83, 40, 188, 217, 249, 127, 63, 191, 6, 197, 191, 147, 0, 3, 23, 196, 184, 71, 62, 6, 26, 85, 188, 189, 15, 123, 63, 194, 46, 220, 191, 150, 0, 3, 23, 236, 95, 129, 62, 246, 58, 205, 186, 47, 177, 119, 63, 236, 135, 227, 191, 153, 0, 3, 23, 76, 6, 173, 62, 59, 208, 113, 61, 237, 118, 112, 63, 84, 84, 242, 191, 156, 0, 3, 10, 26, 180, 243, 62, 185, 20, 54, 63, 39, 107, 4, 63, 42, 244, 3, 192, 159, 0, 3, 10, 13, 180, 108, 61, 66, 164, 31, 63, 42, 148, 71, 63, 185, 223, 242, 191, 162, 0, 3, 10, 152, 10, 22, 59, 7, 172, 185, 62, 183, 146, 110, 63, 206, 240, 230, 191, 165, 0, 3, 20, 81, 103, 134, 62, 215, 19, 118, 191, 61, 168, 172, 189, 114, 1, 154, 191, 168, 0, 3, 27, 83, 149, 159, 62, 174, 98, 113, 191, 100, 80, 240, 189, 148, 162, 153, 191, 171, 0, 3, 27, 111, 83, 87, 63, 183, 142, 8, 191, 94, 235, 182, 189, 42, 16, 193, 191, 174, 0, 3, 5, 248, 38, 205, 62, 145, 58, 130, 190, 216, 84, 97, 63, 208, 172, 3, 192, 177, 0, 3, 23, 149, 185, 137, 190, 177, 250, 117, 63, 228, 205, 135, 189, 201, 95, 158, 191, 180, 0, 3, 29, 190, 46, 190, 190, 64, 212, 107, 63, 119, 22, 237, 189, 178, 1, 161, 191, 183, 0, 3, 32, 116, 85, 87, 191, 251, 146, 8, 63, 124, 134, 181, 189, 5, 52, 193, 191, 186, 0, 3, 2, 154, 39, 205, 190, 56, 62, 130, 62, 46, 84, 97, 63, 35, 173, 3, 192, 189, 0, 3, 20, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 4, 3, 12, 3, 10, 12, 13, 4, 14, 1, 0, 14, 0, 7, 14, 15, 1, 16, 17, 9, 18, 19, 6, 20, 7, 0, 20, 0, 11, 20, 11, 10, 21, 10, 9, 21, 9, 17, 21, 17, 13, 21, 13, 12, 21, 12, 10, 22, 7, 6, 22, 6, 19, 22, 19, 15, 22, 15, 14, 22, 14, 7, 23, 8, 7, 23, 7, 20, 23, 20, 10, 23, 10, 3, 23, 3, 8, 24, 8, 3, 24, 3, 5, 25, 11, 0, 25, 0, 2, 26, 8, 24, 26, 27, 18, 26, 18, 6, 26, 6, 8, 28, 11, 25, 28, 29, 16, 28, 16, 9, 28, 9, 11, 30, 27, 5, 30, 5, 4, 30, 4, 13, 30, 13, 17, 30, 17, 16, 30, 16, 29, 31, 27, 30, 31, 30, 29, 31, 29, 2, 31, 2, 1, 31, 1, 15, 31, 15, 19, 31, 19, 18, 31, 18, 27, 32, 29, 28, 32, 28, 25, 32, 25, 2, 32, 2, 29, 33, 27, 26, 33, 26, 24, 33, 24, 5, 33, 5, 27, 0, 7, 0, 51, 0, 33, 1, 4, 1, 43, 1, 31, 2, 20, 2, 25, 2, 37, 3, 15, 3, 14, 3, 41, 4, 6, 4, 5, 5, 28, 5, 19, 6, 18, 6, 44, 7, 9, 7, 8, 8, 12, 8, 24, 9, 23, 9, 52, 10, 46, 10, 16, 10, 40, 11, 54, 11, 21, 11, 36, 12, 26, 12, 13, 13, 32, 13, 14, 14, 27, 15, 19, 15, 16, 16, 17, 17, 45, 17, 18, 18, 19, 20, 24, 20, 21, 21, 22, 22, 53, 22, 23, 23, 24, 25, 29, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 34, 30, 31, 31, 62, 32, 38, 32, 33, 33, 58, 34, 37, 34, 61, 35, 60, 35, 55, 35, 36, 36, 37, 38, 41, 38, 57, 39, 56, 39, 47, 39, 40, 40, 41, 42, 48, 42, 63, 42, 43, 43, 44, 44, 45, 45, 46, 46, 47, 47, 49, 48, 55, 48, 49, 49, 50, 50, 59, 50, 51, 51, 52, 52, 53, 53, 54, 54, 55, 56, 59, 56, 57, 57, 58, 58, 59, 60, 63, 60, 61, 61, 62, 62, 63, 0, 7, 8, 0, 7, 9, 0, 33, 50, 1, 4, 5, 1, 4, 6, 1, 31, 42, 2, 11, 20, 2, 8, 12, 2, 25, 29, 3, 10, 15, 3, 5, 14, 3, 13, 14, 4, 5, 6, 6, 17, 18, 7, 8, 9, 9, 22, 23, 10, 39, 40, 10, 16, 17, 11, 35, 36, 11, 21, 22, 12, 13, 14, 15, 16, 17, 20, 21, 22, 25, 26, 27, 30, 31, 34, 32, 33, 38, 34, 35, 36, 35, 42, 48, 38, 39, 40, 39, 47, 49, 42, 43, 44, 48, 49, 50, 56, 57, 58, 60, 61, 62, 0, 0, 1, 0, 1, 0, 2, 0, 2, 0, 0, 0, 3, 0, 4, 0, 4, 0, 5, 0, 5, 0, 3, 0, 6, 0, 7, 0, 7, 0, 8, 0, 8, 0, 6, 0, 9, 0, 10, 0, 10, 0, 11, 0, 11, 0, 9, 0, 12, 0, 4, 0, 3, 0, 12, 0, 3, 0, 10, 0, 10, 0, 12, 0, 12, 0, 13, 0, 13, 0, 4, 0, 14, 0, 1, 0, 0, 0, 14, 0, 0, 0, 7, 0, 7, 0, 14, 0, 14, 0, 15, 0, 15, 0, 1, 0, 16, 0, 17, 0, 17, 0, 9, 0, 9, 0, 16, 0, 18, 0, 19, 0, 19, 0, 6, 0, 6, 0, 18, 0, 20, 0, 7, 0, 0, 0, 20, 0, 0, 0, 11, 0, 11, 0, 20, 0, 10, 0, 20, 0, 21, 0, 10, 0, 9, 0, 21, 0, 17, 0, 21, 0, 17, 0, 13, 0, 13, 0, 21, 0, 12, 0, 21, 0, 22, 0, 7, 0, 6, 0, 22, 0, 19, 0, 22, 0, 19, 0, 15, 0, 15, 0, 22, 0, 14, 0, 22, 0, 23, 0, 8, 0, 7, 0, 23, 0, 20, 0, 23, 0, 10, 0, 23, 0, 3, 0, 23, 0, 3, 0, 8, 0, 24, 0, 8, 0, 3, 0, 24, 0, 5, 0, 24, 0, 25, 0, 11, 0, 0, 0, 25, 0, 2, 0, 25, 0, 26, 0, 8, 0, 24, 0, 26, 0, 26, 0, 27, 0, 27, 0, 18, 0, 18, 0, 26, 0, 6, 0, 26, 0, 28, 0, 11, 0, 25, 0, 28, 0, 28, 0, 29, 0, 29, 0, 16, 0, 16, 0, 28, 0, 9, 0, 28, 0, 30, 0, 27, 0, 27, 0, 5, 0, 5, 0, 30, 0, 4, 0, 30, 0, 13, 0, 30, 0, 17, 0, 30, 0, 16, 0, 30, 0, 29, 0, 30, 0, 31, 0, 27, 0, 30, 0, 31, 0, 29, 0, 31, 0, 29, 0, 2, 0, 2, 0, 31, 0, 1, 0, 31, 0, 15, 0, 31, 0, 19, 0, 31, 0, 18, 0, 31, 0, 32, 0, 29, 0, 28, 0, 32, 0, 25, 0, 32, 0, 2, 0, 32, 0, 33, 0, 27, 0, 26, 0, 33, 0, 24, 0, 33, 0, 5, 0, 33, 0, 0, 0, 0, 0, 69, 213, 189, 191, 134, 229, 159, 191, 128, 152, 18, 61, 69, 213, 189, 63, 134, 229, 159, 63, 124, 11, 197, 63, 160, 151, 9, 65, 116, 26, 46, 65, 164, 154, 138, 59, 219, 53, 240, 57, 164, 154, 138, 59, 11, 139, 73, 65, 18, 173, 177, 187, 219, 53, 240, 57, 18, 173, 177, 187, 138, 129, 7, 65, 64, 125, 137, 184, 28, 182, 82, 58, 10, 39, 87, 63, 0, 0, 128, 63, 73, 67, 69, 1, 83, 85, 80, 77, 0, 0, 0, 0, 73, 67, 69, 1, 71, 65, 85, 83, 0, 0, 0, 0, 16, 0, 0, 0, 0, 6, 0, 0, 11, 25, 25, 25, 25, 25, 25, 32, 32, 32, 32, 32, 32, 32, 32, 32, 11, 25, 25, 25, 25, 25, 25, 32, 32, 32, 32, 32, 32, 32, 32, 32, 11, 25, 25, 25, 25, 25, 25, 32, 32, 32, 32, 32, 32, 32, 32, 32, 11, 25, 25, 25, 25, 25, 25, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 25, 25, 25, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 14, 14, 14, 14, 14, 14, 14, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 7, 7, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 7, 7, 7, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 7, 7, 7, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 7, 7, 7, 7, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 7, 7, 7, 7, 7, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 7, 7, 7, 7, 22, 22, 22, 15, 15, 15, 15, 15, 15, 15, 15, 15, 10, 10, 10, 10, 10, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 10, 10, 10, 10, 10, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 10, 10, 10, 10, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 10, 10, 10, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 10, 10, 10, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 10, 10, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 10, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 24, 24, 24, 5, 5, 5, 5, 5, 5, 5, 5, 5, 8, 24, 24, 24, 24, 24, 24, 5, 5, 5, 5, 5, 5, 5, 5, 5, 8, 24, 24, 24, 24, 24, 24, 33, 33, 33, 33, 33, 33, 33, 33, 33, 8, 24, 24, 24, 24, 24, 24, 33, 33, 33, 33, 33, 33, 33, 33, 33, 8, 24, 24, 24, 24, 24, 24, 33, 33, 33, 33, 33, 33, 33, 33, 33, 8, 8, 8, 8, 8, 8, 8, 8, 6, 7, 7, 7, 7, 7, 7, 7, 24, 8, 8, 8, 8, 8, 8, 8, 6, 7, 7, 7, 7, 7, 7, 7, 24, 24, 8, 8, 8, 8, 8, 26, 6, 22, 7, 7, 7, 7, 7, 7, 24, 24, 24, 8, 8, 8, 8, 26, 6, 22, 22, 22, 22, 22, 7, 7, 24, 24, 24, 24, 8, 8, 26, 26, 6, 22, 22, 22, 22, 22, 22, 22, 24, 24, 24, 24, 24, 26, 26, 26, 6, 22, 22, 22, 22, 22, 22, 22, 24, 24, 24, 24, 24, 26, 26, 26, 6, 22, 22, 22, 22, 22, 22, 22, 33, 33, 33, 33, 33, 33, 26, 18, 6, 19, 19, 19, 19, 15, 15, 15, 33, 33, 33, 33, 33, 33, 27, 18, 18, 19, 19, 19, 19, 15, 15, 15, 33, 33, 33, 33, 33, 27, 27, 18, 18, 19, 19, 19, 19, 15, 15, 15, 33, 33, 33, 33, 33, 27, 27, 18, 18, 19, 19, 19, 19, 15, 15, 15, 33, 33, 33, 33, 27, 27, 27, 18, 18, 19, 19, 19, 19, 15, 15, 15, 33, 33, 33, 33, 27, 27, 27, 18, 18, 19, 19, 19, 19, 15, 15, 15, 33, 33, 33, 33, 27, 27, 27, 18, 18, 19, 19, 19, 19, 15, 15, 15, 33, 33, 33, 27, 27, 27, 27, 18, 18, 19, 19, 19, 31, 15, 15, 15, 33, 33, 33, 27, 27, 27, 27, 18, 18, 19, 19, 31, 31, 31, 15, 15, 10, 10, 10, 10, 10, 10, 10, 9, 11, 11, 11, 11, 11, 11, 11, 11, 10, 10, 10, 10, 10, 10, 10, 9, 11, 11, 11, 11, 11, 11, 11, 25, 10, 10, 10, 10, 10, 10, 21, 9, 28, 11, 11, 11, 11, 11, 25, 25, 10, 10, 10, 10, 21, 21, 21, 9, 28, 11, 11, 11, 11, 25, 25, 25, 10, 10, 10, 21, 21, 21, 21, 9, 28, 28, 11, 11, 25, 25, 25, 25, 12, 21, 21, 21, 21, 21, 21, 9, 28, 28, 11, 25, 25, 25, 25, 25, 13, 21, 21, 21, 21, 21, 21, 9, 28, 28, 25, 25, 25, 25, 25, 25, 13, 13, 13, 17, 17, 17, 17, 9, 16, 28, 32, 32, 32, 32, 32, 32, 13, 13, 13, 17, 17, 17, 17, 16, 16, 29, 32, 32, 32, 32, 32, 32, 13, 13, 13, 17, 17, 17, 17, 16, 16, 29, 29, 32, 32, 32, 32, 32, 13, 13, 13, 17, 17, 17, 17, 16, 16, 29, 29, 32, 32, 32, 32, 32, 13, 13, 13, 17, 17, 17, 17, 16, 16, 29, 29, 29, 32, 32, 32, 32, 13, 13, 13, 17, 17, 17, 17, 16, 16, 29, 29, 29, 32, 32, 32, 32, 13, 13, 13, 17, 17, 17, 17, 16, 16, 29, 29, 29, 32, 32, 32, 32, 13, 13, 13, 30, 17, 17, 17, 16, 16, 29, 29, 29, 29, 32, 32, 32, 13, 13, 30, 30, 30, 17, 17, 16, 16, 29, 29, 29, 29, 32, 32, 32, 13, 13, 13, 13, 13, 13, 13, 4, 5, 5, 5, 5, 5, 33, 33, 33, 13, 13, 13, 13, 13, 13, 13, 4, 5, 5, 5, 5, 33, 33, 33, 33, 30, 13, 13, 13, 13, 13, 13, 4, 5, 5, 5, 33, 33, 33, 33, 33, 30, 30, 30, 13, 13, 13, 13, 4, 5, 5, 5, 33, 33, 33, 27, 27, 30, 30, 30, 30, 30, 30, 13, 4, 5, 5, 27, 27, 27, 27, 27, 27, 17, 30, 30, 30, 30, 30, 30, 30, 5, 27, 27, 27, 27, 27, 27, 27, 17, 30, 30, 30, 30, 30, 30, 30, 27, 27, 27, 27, 27, 27, 27, 27, 16, 16, 30, 30, 30, 30, 30, 30, 27, 27, 27, 27, 27, 27, 18, 18, 16, 16, 29, 29, 29, 29, 29, 29, 31, 31, 31, 31, 31, 31, 18, 18, 29, 29, 29, 29, 29, 29, 29, 29, 31, 31, 31, 31, 31, 31, 31, 19, 29, 29, 29, 29, 29, 29, 29, 2, 31, 31, 31, 31, 31, 31, 31, 19, 29, 29, 29, 29, 29, 29, 2, 2, 1, 15, 31, 31, 31, 31, 31, 31, 29, 29, 32, 32, 32, 2, 2, 2, 1, 15, 15, 15, 15, 31, 31, 31, 32, 32, 32, 32, 32, 2, 2, 2, 1, 15, 15, 15, 15, 15, 15, 31, 32, 32, 32, 32, 2, 2, 2, 2, 1, 15, 15, 15, 15, 15, 15, 15, 32, 32, 32, 2, 2, 2, 2, 2, 1, 15, 15, 15, 15, 15, 15, 15, 10, 10, 10, 10, 10, 10, 10, 12, 3, 3, 3, 3, 8, 8, 8, 8, 10, 10, 10, 10, 10, 10, 10, 10, 3, 3, 3, 8, 8, 8, 8, 8, 10, 10, 10, 10, 10, 10, 10, 10, 3, 3, 8, 8, 8, 8, 8, 8, 10, 10, 10, 10, 10, 10, 10, 10, 23, 23, 8, 8, 8, 8, 8, 8, 10, 10, 10, 10, 10, 10, 10, 10, 23, 23, 8, 8, 8, 8, 8, 8, 10, 10, 10, 10, 10, 10, 10, 10, 23, 23, 23, 8, 8, 8, 8, 8, 10, 10, 10, 10, 10, 10, 10, 10, 23, 23, 23, 8, 8, 8, 8, 8, 9, 10, 10, 10, 10, 10, 10, 10, 23, 23, 23, 8, 8, 8, 8, 8, 11, 11, 11, 11, 11, 20, 20, 20, 7, 7, 7, 7, 7, 7, 7, 6, 11, 11, 11, 11, 11, 20, 20, 20, 7, 7, 7, 7, 7, 7, 7, 7, 11, 11, 11, 11, 11, 20, 20, 20, 7, 7, 7, 7, 7, 7, 7, 7, 11, 11, 11, 11, 11, 11, 20, 20, 7, 7, 7, 7, 7, 7, 7, 7, 11, 11, 11, 11, 11, 11, 20, 20, 7, 7, 7, 7, 7, 7, 7, 7, 11, 11, 11, 11, 11, 11, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 11, 11, 11, 11, 11, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 11, 11, 11, 11, 0, 0, 0, 0, 14, 7, 7, 7, 7, 7, 7, 7, 33, 33, 33, 33, 33, 33, 33, 33, 33, 24, 24, 24, 24, 24, 24, 8, 33, 33, 33, 33, 33, 33, 33, 33, 33, 24, 24, 24, 24, 24, 24, 8, 33, 33, 33, 33, 33, 33, 33, 33, 33, 24, 24, 24, 24, 24, 24, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 24, 24, 24, 24, 24, 24, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 24, 24, 24, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 10, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 10, 10, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 10, 10, 10, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 10, 10, 10, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 10, 10, 10, 10, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 10, 10, 10, 10, 10, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 10, 10, 10, 10, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 22, 22, 22, 7, 7, 7, 7, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 14, 7, 7, 7, 7, 7, 15, 15, 15, 15, 15, 15, 15, 15, 15, 14, 14, 14, 7, 7, 7, 7, 15, 15, 15, 15, 15, 15, 15, 15, 15, 14, 14, 14, 14, 7, 7, 7, 15, 15, 15, 15, 15, 15, 15, 15, 15, 14, 14, 14, 14, 7, 7, 7, 15, 15, 15, 15, 15, 15, 15, 15, 15, 14, 14, 14, 14, 14, 7, 7, 15, 15, 15, 15, 15, 15, 15, 15, 15, 14, 14, 14, 14, 14, 14, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 14, 14, 14, 14, 14, 14, 14, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 25, 25, 25, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 25, 25, 25, 25, 25, 25, 11, 32, 32, 32, 32, 32, 32, 32, 32, 32, 25, 25, 25, 25, 25, 25, 11, 32, 32, 32, 32, 32, 32, 32, 32, 32, 25, 25, 25, 25, 25, 25, 11, 32, 32, 32, 32, 32, 32, 32, 32, 32, 25, 25, 25, 25, 25, 25, 11, 32, 32, 32, 29, 29, 29, 29, 16, 16, 17, 17, 30, 30, 30, 13, 13, 32, 32, 32, 29, 29, 29, 29, 16, 16, 17, 17, 17, 30, 13, 13, 13, 32, 32, 32, 32, 29, 29, 29, 16, 16, 17, 17, 17, 17, 13, 13, 13, 32, 32, 32, 32, 29, 29, 29, 16, 16, 17, 17, 17, 17, 13, 13, 13, 32, 32, 32, 32, 29, 29, 29, 16, 16, 17, 17, 17, 17, 13, 13, 13, 32, 32, 32, 32, 32, 29, 29, 16, 16, 17, 17, 17, 17, 13, 13, 13, 32, 32, 32, 32, 32, 29, 29, 16, 16, 17, 17, 17, 17, 13, 13, 13, 32, 32, 32, 32, 32, 32, 29, 16, 16, 17, 17, 17, 17, 13, 13, 13, 32, 32, 32, 32, 32, 32, 28, 16, 9, 17, 17, 17, 17, 13, 13, 13, 25, 25, 25, 25, 25, 25, 28, 28, 9, 21, 21, 21, 21, 21, 21, 13, 25, 25, 25, 25, 25, 11, 28, 28, 9, 21, 21, 21, 21, 21, 21, 12, 25, 25, 25, 25, 11, 11, 28, 28, 9, 21, 21, 21, 21, 10, 10, 10, 25, 25, 25, 11, 11, 11, 11, 28, 9, 21, 21, 21, 10, 10, 10, 10, 25, 25, 11, 11, 11, 11, 11, 28, 9, 21, 10, 10, 10, 10, 10, 10, 25, 11, 11, 11, 11, 11, 11, 11, 9, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 9, 10, 10, 10, 10, 10, 10, 10, 15, 15, 31, 31, 31, 19, 19, 18, 18, 27, 27, 27, 27, 33, 33, 33, 15, 15, 15, 31, 19, 19, 19, 18, 18, 27, 27, 27, 27, 33, 33, 33, 15, 15, 15, 19, 19, 19, 19, 18, 18, 27, 27, 27, 33, 33, 33, 33, 15, 15, 15, 19, 19, 19, 19, 18, 18, 27, 27, 27, 33, 33, 33, 33, 15, 15, 15, 19, 19, 19, 19, 18, 18, 27, 27, 27, 33, 33, 33, 33, 15, 15, 15, 19, 19, 19, 19, 18, 18, 27, 27, 33, 33, 33, 33, 33, 15, 15, 15, 19, 19, 19, 19, 18, 18, 27, 27, 33, 33, 33, 33, 33, 15, 15, 15, 19, 19, 19, 19, 18, 18, 27, 33, 33, 33, 33, 33, 33, 15, 15, 15, 19, 19, 19, 19, 6, 18, 26, 33, 33, 33, 33, 33, 33, 22, 22, 22, 22, 22, 22, 22, 6, 26, 26, 26, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 6, 26, 26, 26, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 6, 26, 26, 8, 8, 24, 24, 24, 24, 7, 7, 22, 22, 22, 22, 22, 6, 26, 8, 8, 8, 8, 24, 24, 24, 7, 7, 7, 7, 7, 7, 22, 6, 26, 8, 8, 8, 8, 8, 24, 24, 7, 7, 7, 7, 7, 7, 7, 6, 8, 8, 8, 8, 8, 8, 8, 24, 7, 7, 7, 7, 7, 7, 7, 6, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 14, 0, 0, 0, 0, 11, 11, 11, 11, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 11, 11, 11, 11, 11, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 11, 11, 11, 11, 11, 11, 7, 7, 7, 7, 7, 7, 7, 7, 20, 20, 11, 11, 11, 11, 11, 11, 7, 7, 7, 7, 7, 7, 7, 7, 20, 20, 11, 11, 11, 11, 11, 11, 7, 7, 7, 7, 7, 7, 7, 7, 20, 20, 20, 11, 11, 11, 11, 11, 7, 7, 7, 7, 7, 7, 7, 7, 20, 20, 20, 11, 11, 11, 11, 11, 6, 7, 7, 7, 7, 7, 7, 7, 20, 20, 20, 11, 11, 11, 11, 11, 8, 8, 8, 8, 8, 23, 23, 23, 10, 10, 10, 10, 10, 10, 10, 9, 8, 8, 8, 8, 8, 23, 23, 23, 10, 10, 10, 10, 10, 10, 10, 10, 8, 8, 8, 8, 8, 23, 23, 23, 10, 10, 10, 10, 10, 10, 10, 10, 8, 8, 8, 8, 8, 8, 23, 23, 10, 10, 10, 10, 10, 10, 10, 10, 8, 8, 8, 8, 8, 8, 23, 23, 10, 10, 10, 10, 10, 10, 10, 10, 8, 8, 8, 8, 8, 8, 3, 3, 10, 10, 10, 10, 10, 10, 10, 10, 8, 8, 8, 8, 8, 3, 3, 3, 10, 10, 10, 10, 10, 10, 10, 10, 8, 8, 8, 8, 3, 3, 3, 3, 12, 10, 10, 10, 10, 10, 10, 10, 15, 15, 15, 15, 15, 15, 15, 1, 2, 2, 2, 2, 2, 32, 32, 32, 15, 15, 15, 15, 15, 15, 15, 1, 2, 2, 2, 2, 32, 32, 32, 32, 31, 15, 15, 15, 15, 15, 15, 1, 2, 2, 2, 32, 32, 32, 32, 32, 31, 31, 31, 15, 15, 15, 15, 1, 2, 2, 2, 32, 32, 32, 29, 29, 31, 31, 31, 31, 31, 31, 15, 1, 2, 2, 29, 29, 29, 29, 29, 29, 19, 31, 31, 31, 31, 31, 31, 31, 2, 29, 29, 29, 29, 29, 29, 29, 19, 31, 31, 31, 31, 31, 31, 31, 29, 29, 29, 29, 29, 29, 29, 29, 18, 18, 31, 31, 31, 31, 31, 31, 29, 29, 29, 29, 29, 29, 16, 16, 18, 18, 27, 27, 27, 27, 27, 27, 30, 30, 30, 30, 30, 30, 16, 16, 27, 27, 27, 27, 27, 27, 27, 27, 30, 30, 30, 30, 30, 30, 30, 17, 27, 27, 27, 27, 27, 27, 27, 5, 30, 30, 30, 30, 30, 30, 30, 17, 27, 27, 27, 27, 27, 27, 5, 5, 4, 13, 30, 30, 30, 30, 30, 30, 27, 27, 33, 33, 33, 5, 5, 5, 4, 13, 13, 13, 13, 30, 30, 30, 33, 33, 33, 33, 33, 5, 5, 5, 4, 13, 13, 13, 13, 13, 13, 30, 33, 33, 33, 33, 5, 5, 5, 5, 4, 13, 13, 13, 13, 13, 13, 13, 33, 33, 33, 5, 5, 5, 5, 5, 4, 13, 13, 13, 13, 13, 13, 13, 73, 67, 69, 1, 86, 65, 76, 69, 2, 0, 0, 0, 34, 0, 0, 0, 192, 0, 0, 0, 8, 0, 0, 0, 7, 5, 6, 7, 5, 6, 6, 7, 6, 6, 7, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 8, 8, 4, 4, 1, 14, 7, 20, 11, 25, 2, 2, 31, 15, 14, 0, 0, 25, 32, 29, 31, 1, 4, 12, 10, 23, 8, 24, 5, 5, 30, 13, 12, 3, 3, 24, 33, 27, 30, 4, 7, 22, 19, 18, 26, 8, 8, 23, 20, 0, 14, 22, 6, 6, 26, 24, 3, 23, 7, 10, 21, 17, 16, 28, 11, 11, 20, 23, 3, 12, 21, 9, 9, 28, 25, 0, 20, 10, 4, 13, 21, 10, 3, 4, 30, 17, 21, 12, 1, 15, 22, 7, 0, 1, 31, 19, 22, 14, 17, 30, 29, 28, 9, 9, 21, 13, 30, 16, 19, 31, 27, 26, 6, 6, 22, 15, 31, 18, 7, 23, 10, 11, 0, 10, 12, 13, 17, 9, 7, 14, 15, 19, 6, 8, 3, 10, 20, 7, 8, 26, 33, 5, 3, 11, 28, 32, 2, 0, 8, 6, 18, 27, 33, 24, 18, 31, 30, 5, 33, 26, 11, 9, 16, 29, 32, 25, 16, 30, 31, 2, 32, 28, 27, 31, 29, 16, 17, 13, 4, 5, 27, 18, 19, 15, 1, 2, 29, 30, 29, 2, 25, 28, 27, 5, 24, 26, 0, 0, 128, 191, 11, 235, 50, 63, 116, 16, 175, 63, 205, 152, 206, 62, 205, 152, 206, 62]
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

            def "basket_pink" (
                delete apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI"]
                prepend payload = @./basket/basket_pink.usd@
            )
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-9.308117055178023e-16, -5.133723756498465e-16, 0.78)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "basket_base"
                {
                    over "basket"
                    {
                        over "Meshes" (
                            delete apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI"]
                        )
                        {
                            over "Sketchfab_model"
                            {
                                over "LAUNDRY_BASKET_obj_cleaner_materialmerger_gles"
                                {
                                    over "Object_2"
                                    {
                                        over "Object_0" (
                                            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI"]
                                        )
                                        {
                                            uniform token physics:approximation = "convexHull"
                                            bool physics:collisionEnabled = 1
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

            def "basket_white" (
                delete apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI"]
                prepend payload = @./basket/basket_white.usd@
            )
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, -0.48, 0.78)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "basket_base"
                {
                    over "basket"
                    {
                        over "Meshes"
                        {
                            over "Sketchfab_model"
                            {
                                over "LAUNDRY_BASKET_obj_cleaner_materialmerger_gles"
                                {
                                    over "Object_2"
                                    {
                                        over "Object_0" (
                                            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI"]
                                        )
                                        {
                                            uniform token physics:approximation = "convexHull"
                                            bool physics:collisionEnabled = 1
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        def "Franka" (
            prepend payload = @http://omniverse-content-production.s3-us-west-2.amazonaws.com/Assets/Isaac/2023.1.1/Isaac/Robots/Franka/franka.usd@
        )
        {
            quatd xformOp:orient = (6.123234262925839e-17, 0, 0, 1)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-0.49000000953674316, 0, 0.800000011920929)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            over "panda_link0"
            {
            }

            over "panda_link1"
            {
            }

            over "panda_link2"
            {
            }

            over "panda_link3"
            {
            }

            over "panda_link4"
            {
            }

            over "panda_link5"
            {
            }

            over "panda_link6"
            {
            }

            over "panda_link7"
            {
            }

            over "panda_link8"
            {
            }

            over "panda_hand"
            {
            }

            over "panda_leftfinger"
            {
            }

            over "panda_rightfinger"
            {
            }
        }

        def "table" (
            prepend payload = @./table/table.usd@
        )
        {
            quatf xformOp:orient = (0.70710677, 0, 0, 0.70710677)
            float3 xformOp:scale = (0.8859541, 1, 1)
            double3 xformOp:scale:unitsResolve = (0.01, 0.01, 0.01)
            double3 xformOp:translate = (-4.76837158203125e-7, -4.76837158203125e-7, 8.881784197001252e-16)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale", "xformOp:scale:unitsResolve"]

            over "mesh"
            {
                over "collision"
                {
                    over "top" (
                        prepend apiSchemas = ["PhysxCookedDataAPI:triangleMesh"]
                    )
                    {
                        uchar[] physxCookedData:triangleMesh:buffer = [7, 121, 208, 107, 22, 30, 224, 166, 4, 83, 186, 229, 43, 20, 125, 112, 206, 78, 88, 83, 1, 77, 69, 83, 72, 16, 0, 0, 0, 1, 0, 0, 0, 182, 1, 0, 0, 8, 0, 0, 0, 12, 0, 0, 0, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 72, 194, 0, 0, 72, 66, 0, 0, 72, 194, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 72, 66, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 72, 66, 0, 0, 72, 194, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 72, 194, 5, 7, 3, 5, 3, 1, 4, 6, 7, 4, 7, 5, 6, 2, 3, 6, 3, 7, 4, 5, 1, 4, 1, 0, 4, 0, 2, 4, 2, 6, 0, 1, 3, 0, 3, 2, 11, 0, 0, 0, 10, 11, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 3, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 6, 0, 0, 0, 9, 0, 0, 0, 5, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 9, 0, 0, 0, 11, 0, 0, 0, 5, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 7, 0, 0, 0, 6, 0, 0, 0, 10, 0, 0, 0, 8, 0, 0, 0, 7, 0, 0, 0, 11, 0, 0, 0, 9, 0, 0, 0, 8, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 7, 0, 0, 0, 1, 0, 0, 0, 11, 0, 0, 0, 10, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 66, 86, 52, 32, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 52, 173, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 55, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 72, 66, 12, 0, 0, 0, 24, 48, 24, 48, 24, 48, 24, 48, 24, 48, 24, 48, 4, 7, 5, 4, 6, 7, 5, 7, 3, 5, 3, 1, 6, 2, 3, 6, 3, 7, 4, 5, 1, 4, 1, 0, 4, 0, 2, 4, 2, 6, 0, 1, 3, 0, 3, 2, 1, 0, 0, 128, 2, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 3, 0, 0, 128, 0, 0, 0, 0, 2, 0, 0, 128, 10, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 11, 0, 0, 0, 5, 0, 0, 128, 0, 0, 0, 0, 4, 0, 0, 128, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 7, 0, 0, 128, 0, 0, 0, 0, 6, 0, 0, 128, 10, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 11, 0, 0, 0, 9, 0, 0, 128, 0, 0, 0, 0, 8, 0, 0, 128, 4, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 3, 0, 0, 0, 11, 0, 0, 128, 0, 0, 0, 0, 10, 0, 0, 128, 4, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 66, 86, 51, 50, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 52, 173, 66, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 0, 0, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 12, 0, 0, 0, 18, 0, 0, 0, 24, 0, 0, 0, 28, 0, 0, 0, 32, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 3, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 10, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 11, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 6, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 5, 0, 0, 0]
                    }

                    over "side_right" (
                        prepend apiSchemas = ["PhysxCookedDataAPI:triangleMesh"]
                    )
                    {
                        uchar[] physxCookedData:triangleMesh:buffer = [7, 121, 208, 107, 22, 30, 224, 166, 4, 83, 186, 229, 43, 20, 125, 112, 206, 78, 88, 83, 1, 77, 69, 83, 72, 16, 0, 0, 0, 1, 0, 0, 0, 182, 1, 0, 0, 8, 0, 0, 0, 12, 0, 0, 0, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 72, 194, 0, 0, 72, 66, 0, 0, 72, 194, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 72, 66, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 72, 66, 0, 0, 72, 194, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 72, 194, 5, 7, 3, 5, 3, 1, 4, 6, 7, 4, 7, 5, 6, 2, 3, 6, 3, 7, 4, 5, 1, 4, 1, 0, 4, 0, 2, 4, 2, 6, 0, 1, 3, 0, 3, 2, 11, 0, 0, 0, 10, 11, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 3, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 6, 0, 0, 0, 9, 0, 0, 0, 5, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 9, 0, 0, 0, 11, 0, 0, 0, 5, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 7, 0, 0, 0, 6, 0, 0, 0, 10, 0, 0, 0, 8, 0, 0, 0, 7, 0, 0, 0, 11, 0, 0, 0, 9, 0, 0, 0, 8, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 7, 0, 0, 0, 1, 0, 0, 0, 11, 0, 0, 0, 10, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 66, 86, 52, 32, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 52, 173, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 55, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 72, 66, 12, 0, 0, 0, 24, 48, 24, 48, 24, 48, 24, 48, 24, 48, 24, 48, 4, 7, 5, 4, 6, 7, 5, 7, 3, 5, 3, 1, 6, 2, 3, 6, 3, 7, 4, 5, 1, 4, 1, 0, 4, 0, 2, 4, 2, 6, 0, 1, 3, 0, 3, 2, 1, 0, 0, 128, 2, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 3, 0, 0, 128, 0, 0, 0, 0, 2, 0, 0, 128, 10, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 11, 0, 0, 0, 5, 0, 0, 128, 0, 0, 0, 0, 4, 0, 0, 128, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 7, 0, 0, 128, 0, 0, 0, 0, 6, 0, 0, 128, 10, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 11, 0, 0, 0, 9, 0, 0, 128, 0, 0, 0, 0, 8, 0, 0, 128, 4, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 3, 0, 0, 0, 11, 0, 0, 128, 0, 0, 0, 0, 10, 0, 0, 128, 4, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 66, 86, 51, 50, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 52, 173, 66, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 0, 0, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 12, 0, 0, 0, 18, 0, 0, 0, 24, 0, 0, 0, 28, 0, 0, 0, 32, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 3, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 10, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 11, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 6, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 5, 0, 0, 0]
                    }

                    over "side_left" (
                        prepend apiSchemas = ["PhysxCookedDataAPI:triangleMesh"]
                    )
                    {
                        uchar[] physxCookedData:triangleMesh:buffer = [7, 121, 208, 107, 22, 30, 224, 166, 4, 83, 186, 229, 43, 20, 125, 112, 206, 78, 88, 83, 1, 77, 69, 83, 72, 16, 0, 0, 0, 1, 0, 0, 0, 182, 1, 0, 0, 8, 0, 0, 0, 12, 0, 0, 0, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 72, 194, 0, 0, 72, 66, 0, 0, 72, 194, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 72, 66, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 72, 66, 0, 0, 72, 194, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 72, 194, 5, 7, 3, 5, 3, 1, 4, 6, 7, 4, 7, 5, 6, 2, 3, 6, 3, 7, 4, 5, 1, 4, 1, 0, 4, 0, 2, 4, 2, 6, 0, 1, 3, 0, 3, 2, 11, 0, 0, 0, 10, 11, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 3, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 6, 0, 0, 0, 9, 0, 0, 0, 5, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 9, 0, 0, 0, 11, 0, 0, 0, 5, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 7, 0, 0, 0, 6, 0, 0, 0, 10, 0, 0, 0, 8, 0, 0, 0, 7, 0, 0, 0, 11, 0, 0, 0, 9, 0, 0, 0, 8, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 7, 0, 0, 0, 1, 0, 0, 0, 11, 0, 0, 0, 10, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 66, 86, 52, 32, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 52, 173, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 55, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 72, 66, 12, 0, 0, 0, 24, 48, 24, 48, 24, 48, 24, 48, 24, 48, 24, 48, 4, 7, 5, 4, 6, 7, 5, 7, 3, 5, 3, 1, 6, 2, 3, 6, 3, 7, 4, 5, 1, 4, 1, 0, 4, 0, 2, 4, 2, 6, 0, 1, 3, 0, 3, 2, 1, 0, 0, 128, 2, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 3, 0, 0, 128, 0, 0, 0, 0, 2, 0, 0, 128, 10, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 11, 0, 0, 0, 5, 0, 0, 128, 0, 0, 0, 0, 4, 0, 0, 128, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 7, 0, 0, 128, 0, 0, 0, 0, 6, 0, 0, 128, 10, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 11, 0, 0, 0, 9, 0, 0, 128, 0, 0, 0, 0, 8, 0, 0, 128, 4, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 3, 0, 0, 0, 11, 0, 0, 128, 0, 0, 0, 0, 10, 0, 0, 128, 4, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 66, 86, 51, 50, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 52, 173, 66, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 0, 0, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 12, 0, 0, 0, 18, 0, 0, 0, 24, 0, 0, 0, 28, 0, 0, 0, 32, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 3, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 10, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 11, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 6, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 5, 0, 0, 0]
                    }
                }

                over "visual"
                {
                    float3 xformOp:rotateXYZ = (0, 0, 0)
                    float3 xformOp:scale = (0.8011636, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:translate:pivot", "xformOp:rotateXYZ", "xformOp:scale", "!invert!xformOp:translate:pivot"]
                }
            }
        }
    }

    def Xform "Conveyor" (
        kind = "group"
    )
    {
        float3 xformOp:rotateXYZ = (0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-0.026662548866354496, 0, -0.008692426343300808)
        float3 xformOp:translate:pivot = (2.220446e-16, 0, 1.1554745)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:translate:pivot", "xformOp:rotateXYZ", "xformOp:scale", "!invert!xformOp:translate:pivot"]

        def Xform "Track" (
            kind = "group"
        )
        {
            float3 xformOp:rotateXYZ = (0, 0, 0)
            float3 xformOp:scale = (1, 1, 0.4)
            double3 xformOp:translate = (-1.992404118245191, 0, -0.6821242039843839)
            float3 xformOp:translate:pivot = (2.220446e-16, 0, 1.1554745)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:translate:pivot", "xformOp:rotateXYZ", "xformOp:scale", "!invert!xformOp:translate:pivot"]

            def Xform "ConveyorTrackA" (
                prepend references = @http://omniverse-content-production.s3-us-west-2.amazonaws.com/Assets/Isaac/2022.2.1/Isaac/Props/Conveyors/ConveyorBelt_A06.usd@
            )
            {
                quatd xformOp:orient = (6.123233995736766e-17, 0, 0, 1)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                def OmniGraph "ConveyorBeltGraph"
                {
                    token evaluationMode = "Automatic"
                    token evaluator:type = "execution"
                    token fabricCacheBacking = "Shared"
                    int2 fileFormatVersion = (1, 7)
                    token pipelineStage = "pipelineStageSimulation"

                    def OmniGraphNode "OnTick"
                    {
                        token node:type = "omni.graph.action.OnPlaybackTick"
                        int node:typeVersion = 1
                        custom double outputs:deltaSeconds
                        custom double outputs:frame
                        custom uint outputs:tick (
                            customData = {
                                bool isExecution = 1
                            }
                        )
                        custom double outputs:time
                    }

                    def OmniGraphNode "ConveyorNode"
                    {
                        custom float2 inputs:animateDirection = (1, 0)
                        custom float inputs:animateScale = 0.5
                        custom bool inputs:animateTexture
                        custom rel inputs:conveyorPrim = </Main/Conveyor/Track/ConveyorTrackA/Belt> (
                            customData = {
                                dictionary omni = {
                                    dictionary graph = {
                                        string relType = "target"
                                    }
                                }
                            }
                        )
                        custom bool inputs:curved = 0
                        custom float inputs:delta
                        prepend float inputs:delta.connect = </Main/Conveyor/Track/ConveyorTrackA/ConveyorBeltGraph/OnTick.outputs:deltaSeconds>
                        custom float3 inputs:direction = (1, 0, 0)
                        custom bool inputs:enabled
                        custom uint inputs:onStep
                        prepend uint inputs:onStep.connect = </Main/Conveyor/Track/ConveyorTrackA/ConveyorBeltGraph/OnTick.outputs:tick>
                        custom float inputs:velocity
                        token node:type = "omni.isaac.conveyor.IsaacConveyor"
                        int node:typeVersion = 1
                    }
                }
            }

            def Xform "ConveyorTrackB" (
                prepend references = @http://omniverse-content-production.s3-us-west-2.amazonaws.com/Assets/Isaac/2022.2.1/Isaac/Props/Conveyors/ConveyorBelt_A06.usd@
            )
            {
                quatd xformOp:orient = (1, 0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                def OmniGraph "ConveyorBeltGraph"
                {
                    token evaluationMode = "Automatic"
                    token evaluator:type = "execution"
                    token fabricCacheBacking = "Shared"
                    int2 fileFormatVersion = (1, 7)
                    token pipelineStage = "pipelineStageSimulation"

                    def OmniGraphNode "OnTick"
                    {
                        token node:type = "omni.graph.action.OnPlaybackTick"
                        int node:typeVersion = 1
                        custom double outputs:deltaSeconds
                        custom double outputs:frame
                        custom uint outputs:tick (
                            customData = {
                                bool isExecution = 1
                            }
                        )
                        custom double outputs:time
                    }

                    def OmniGraphNode "ConveyorNode"
                    {
                        custom float2 inputs:animateDirection = (1, 0)
                        custom float inputs:animateScale = 0.5
                        custom bool inputs:animateTexture
                        custom rel inputs:conveyorPrim = </Main/Conveyor/Track/ConveyorTrackB/Belt> (
                            customData = {
                                dictionary omni = {
                                    dictionary graph = {
                                        string relType = "target"
                                    }
                                }
                            }
                        )
                        custom bool inputs:curved = 0
                        custom float inputs:delta
                        prepend float inputs:delta.connect = </Main/Conveyor/Track/ConveyorTrackB/ConveyorBeltGraph/OnTick.outputs:deltaSeconds>
                        custom float3 inputs:direction = (1, 0, 0)
                        custom bool inputs:enabled
                        custom uint inputs:onStep
                        prepend uint inputs:onStep.connect = </Main/Conveyor/Track/ConveyorTrackB/ConveyorBeltGraph/OnTick.outputs:tick>
                        custom float inputs:velocity
                        token node:type = "omni.isaac.conveyor.IsaacConveyor"
                        int node:typeVersion = 1
                    }
                }

                over "Belt"
                {
                    quatd xformOp:orient = (1, 0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0.9997167968750001, -0.00003170859375018146, 1.7610116577148438)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }
            }
        }

        def Xform "Sensors" (
            kind = "group"
        )
        {
            float3 xformOp:rotateXYZ = (0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-1.1, 0, 0.7393078417631291)
            float3 xformOp:translate:pivot = (0, 0, 0.58)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:translate:pivot", "xformOp:rotateXYZ", "xformOp:scale", "!invert!xformOp:translate:pivot"]

            def Mesh "emitter" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
                int[] faceVertexIndices = [0, 1, 3, 2, 4, 6, 7, 5, 6, 2, 3, 7, 4, 5, 1, 0, 4, 0, 2, 6, 5, 7, 3, 1]
                rel material:binding = </Main/Conveyor/Sensors/materials/Looks/Silver> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0)] (
                    interpolation = "faceVarying"
                )
                point3f[] points = [(-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5), (-0.5, -0.5, -0.5), (0.5, -0.5, -0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5)]
                texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1), (1, 0), (1, 1), (0, 1), (0, 0), (0, 1), (0, 0), (1, 0), (1, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (1, 0), (1, 1), (0, 1), (0, 0)] (
                    interpolation = "faceVarying"
                )
                uniform token subdivisionScheme = "none"
                quatd xformOp:orient = (1, 0, 0, 0)
                double3 xformOp:scale = (0.07, 0.04, 0.04)
                double3 xformOp:translate = (0, 0.476, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            def Mesh "receiver" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
                int[] faceVertexIndices = [0, 1, 3, 2, 4, 6, 7, 5, 6, 2, 3, 7, 4, 5, 1, 0, 4, 0, 2, 6, 5, 7, 3, 1]
                rel material:binding = </Main/Conveyor/Sensors/materials/Looks/Silver> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0)] (
                    interpolation = "faceVarying"
                )
                point3f[] points = [(-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5), (-0.5, -0.5, -0.5), (0.5, -0.5, -0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5)]
                texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1), (1, 0), (1, 1), (0, 1), (0, 0), (0, 1), (0, 0), (1, 0), (1, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (1, 0), (1, 1), (0, 1), (0, 0)] (
                    interpolation = "faceVarying"
                )
                uniform token subdivisionScheme = "none"
                quatd xformOp:orient = (1, 0, 0, 0)
                double3 xformOp:scale = (0.07, 0.04, 0.04)
                double3 xformOp:translate = (0, -0.476, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            def "materials" (
                prepend payload = @http://omniverse-content-production.s3-us-west-2.amazonaws.com/Assets/Isaac/2023.1.1/Isaac/Sensors/LeopardImaging/Owl/materials/materials.usd@
            )
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-1, 0.476, 0.58)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }
        }
    }
}

over "World" (
    active = false
)
{
}

over "Environment"
{
    over "defaultLight"
    {
        quatd xformOp:orient = (0.6532814824381883, 0.2705980500730985, 0.27059805007309845, 0.6532814824381882)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    over "default_environment"
    {
        over "SphereLight"
        {
            quatd xformOp:orient = (0.5000000000000001, 0.5, 0.49999999999999994, 0.5)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 2.5)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }
    }
}

